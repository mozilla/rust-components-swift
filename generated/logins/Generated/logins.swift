// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(MozillaRustComponents)
    import MozillaRustComponents
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            try! rustCall { ffi_logins_f90f_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_logins_f90f_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Types conforming to `Serializable` can be read and written in a bytebuffer.
private protocol Serializable {
    func write(into: Writer)
    static func read(from: Reader) throws -> Self
}

// Types confirming to `ViaFfi` can be transferred back-and-for over the FFI.
// This is analogous to the Rust trait of the same name.
private protocol ViaFfi: Serializable {
    associatedtype FfiType
    static func lift(_ v: FfiType) throws -> Self
    func lower() -> FfiType
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol Primitive {}

private extension Primitive {
    typealias FfiType = Self

    static func lift(_ v: Self) throws -> Self {
        return v
    }

    func lower() -> Self {
        return self
    }
}

// Types conforming to `ViaFfiUsingByteBuffer` lift and lower into a bytebuffer.
// Use this for complex types where it's hard to write a custom lift/lower.
private protocol ViaFfiUsingByteBuffer: Serializable {}

private extension ViaFfiUsingByteBuffer {
    typealias FfiType = RustBuffer

    static func lift(_ buf: RustBuffer) throws -> Self {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try Self.read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    func lower() -> RustBuffer {
        let writer = Writer()
        write(into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// Implement our protocols for the built-in types that we use.

extension Optional: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Wrapped: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try Wrapped.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }

    fileprivate func write(into buf: Writer) {
        guard let value = self else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        value.write(into: buf)
    }
}

extension Array: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Element: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        var seq = [Element]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try Element.read(from: buf))
        }
        return seq
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(count)
        buf.writeInt(len)
        for item in self {
            item.write(into: buf)
        }
    }
}

extension Int64: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Int64 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension Bool: ViaFfi {
    fileprivate typealias FfiType = Int8

    fileprivate static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }

    fileprivate static func lift(_ v: Int8) throws -> Bool {
        return v != 0
    }

    fileprivate func lower() -> Int8 {
        return self ? 1 : 0
    }
}

extension String: ViaFfi {
    fileprivate typealias FfiType = RustBuffer

    fileprivate static func lift(_ v: FfiType) throws -> Self {
        defer {
            try! rustCall { ffi_logins_f90f_rustbuffer_free(v, $0) }
        }
        if v.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: v.data!, count: Int(v.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    fileprivate func lower() -> FfiType {
        return utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                let bytes = ForeignBytes(bufferPointer: buf)
                return try! rustCall { ffi_logins_f90f_rustbuffer_from_bytes(bytes, $0) }
            }
        }
    }

    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(utf8.count)
        buf.writeInt(len)
        buf.writeBytes(utf8)
    }
}

// Public interface members begin here.

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

public enum LoginsStorageError {
    // Simple error enums only carry a message
    case UnexpectedLoginsStorageError(message: String)

    // Simple error enums only carry a message
    case SyncAuthInvalid(message: String)

    // Simple error enums only carry a message
    case MismatchedLock(message: String)

    // Simple error enums only carry a message
    case NoSuchRecord(message: String)

    // Simple error enums only carry a message
    case IdCollision(message: String)

    // Simple error enums only carry a message
    case InvalidRecord(message: String)

    // Simple error enums only carry a message
    case InvalidKey(message: String)

    // Simple error enums only carry a message
    case RequestFailed(message: String)

    // Simple error enums only carry a message
    case Interrupted(message: String)
}

extension LoginsStorageError: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> LoginsStorageError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .UnexpectedLoginsStorageError(
                message: try String.read(from: buf)
            )

        case 2: return .SyncAuthInvalid(
                message: try String.read(from: buf)
            )

        case 3: return .MismatchedLock(
                message: try String.read(from: buf)
            )

        case 4: return .NoSuchRecord(
                message: try String.read(from: buf)
            )

        case 5: return .IdCollision(
                message: try String.read(from: buf)
            )

        case 6: return .InvalidRecord(
                message: try String.read(from: buf)
            )

        case 7: return .InvalidKey(
                message: try String.read(from: buf)
            )

        case 8: return .RequestFailed(
                message: try String.read(from: buf)
            )

        case 9: return .Interrupted(
                message: try String.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .UnexpectedLoginsStorageError(message):
            buf.writeInt(Int32(1))
            message.write(into: buf)
        case let .SyncAuthInvalid(message):
            buf.writeInt(Int32(2))
            message.write(into: buf)
        case let .MismatchedLock(message):
            buf.writeInt(Int32(3))
            message.write(into: buf)
        case let .NoSuchRecord(message):
            buf.writeInt(Int32(4))
            message.write(into: buf)
        case let .IdCollision(message):
            buf.writeInt(Int32(5))
            message.write(into: buf)
        case let .InvalidRecord(message):
            buf.writeInt(Int32(6))
            message.write(into: buf)
        case let .InvalidKey(message):
            buf.writeInt(Int32(7))
            message.write(into: buf)
        case let .RequestFailed(message):
            buf.writeInt(Int32(8))
            message.write(into: buf)
        case let .Interrupted(message):
            buf.writeInt(Int32(9))
            message.write(into: buf)
        }
    }
}

extension LoginsStorageError: Equatable, Hashable {}

extension LoginsStorageError: Error {}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, E: ViaFfiUsingByteBuffer & Error>(_: E.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: { try E.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try String.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

public struct Login {
    public var id: String
    public var hostname: String
    public var password: String
    public var username: String
    public var httpRealm: String?
    public var formSubmitUrl: String?
    public var usernameField: String
    public var passwordField: String
    public var timesUsed: Int64
    public var timeCreated: Int64
    public var timeLastUsed: Int64
    public var timePasswordChanged: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, hostname: String, password: String, username: String, httpRealm: String?, formSubmitUrl: String?, usernameField: String, passwordField: String, timesUsed: Int64, timeCreated: Int64, timeLastUsed: Int64, timePasswordChanged: Int64) {
        self.id = id
        self.hostname = hostname
        self.password = password
        self.username = username
        self.httpRealm = httpRealm
        self.formSubmitUrl = formSubmitUrl
        self.usernameField = usernameField
        self.passwordField = passwordField
        self.timesUsed = timesUsed
        self.timeCreated = timeCreated
        self.timeLastUsed = timeLastUsed
        self.timePasswordChanged = timePasswordChanged
    }
}

extension Login: Equatable, Hashable {
    public static func == (lhs: Login, rhs: Login) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.hostname != rhs.hostname {
            return false
        }
        if lhs.password != rhs.password {
            return false
        }
        if lhs.username != rhs.username {
            return false
        }
        if lhs.httpRealm != rhs.httpRealm {
            return false
        }
        if lhs.formSubmitUrl != rhs.formSubmitUrl {
            return false
        }
        if lhs.usernameField != rhs.usernameField {
            return false
        }
        if lhs.passwordField != rhs.passwordField {
            return false
        }
        if lhs.timesUsed != rhs.timesUsed {
            return false
        }
        if lhs.timeCreated != rhs.timeCreated {
            return false
        }
        if lhs.timeLastUsed != rhs.timeLastUsed {
            return false
        }
        if lhs.timePasswordChanged != rhs.timePasswordChanged {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(hostname)
        hasher.combine(password)
        hasher.combine(username)
        hasher.combine(httpRealm)
        hasher.combine(formSubmitUrl)
        hasher.combine(usernameField)
        hasher.combine(passwordField)
        hasher.combine(timesUsed)
        hasher.combine(timeCreated)
        hasher.combine(timeLastUsed)
        hasher.combine(timePasswordChanged)
    }
}

private extension Login {
    static func read(from buf: Reader) throws -> Login {
        return try Login(
            id: String.read(from: buf),
            hostname: String.read(from: buf),
            password: String.read(from: buf),
            username: String.read(from: buf),
            httpRealm: String?.read(from: buf),
            formSubmitUrl: String?.read(from: buf),
            usernameField: String.read(from: buf),
            passwordField: String.read(from: buf),
            timesUsed: Int64.read(from: buf),
            timeCreated: Int64.read(from: buf),
            timeLastUsed: Int64.read(from: buf),
            timePasswordChanged: Int64.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        id.write(into: buf)
        hostname.write(into: buf)
        password.write(into: buf)
        username.write(into: buf)
        httpRealm.write(into: buf)
        formSubmitUrl.write(into: buf)
        usernameField.write(into: buf)
        passwordField.write(into: buf)
        timesUsed.write(into: buf)
        timeCreated.write(into: buf)
        timeLastUsed.write(into: buf)
        timePasswordChanged.write(into: buf)
    }
}

extension Login: ViaFfiUsingByteBuffer, ViaFfi {}

public func openAndGetSalt(path: String, encryptionKey: String) throws -> String {
    let _retval = try

        rustCallWithError(LoginsStorageError.self) {
            logins_f90f_open_and_get_salt(path.lower(), encryptionKey.lower(), $0)
        }
    return try String.lift(_retval)
}

public func openAndMigrateToPlaintextHeader(path: String, encryptionKey: String, salt: String) throws {
    try

        rustCallWithError(LoginsStorageError.self) {
            logins_f90f_open_and_migrate_to_plaintext_header(path.lower(), encryptionKey.lower(), salt.lower(), $0)
        }
}

public protocol LoginStoreProtocol {
    func checkValidWithNoDupes(login: Login) throws
    func add(login: Login) throws -> String
    func delete(id: String) throws -> Bool
    func wipe() throws
    func wipeLocal() throws
    func reset() throws
    func disableMemSecurity() throws
    func rekeyDatabase(newEncryptionKey: String) throws
    func touch(id: String) throws
    func list() throws -> [Login]
    func getByBaseDomain(baseDomain: String) throws -> [Login]
    func potentialDupesIgnoringUsername(login: Login) throws -> [Login]
    func get(id: String) throws -> Login?
    func update(login: Login) throws
    func importMultiple(login: [Login]) throws -> String
    func registerWithSyncManager()
    func sync(keyId: String, accessToken: String, syncKey: String, tokenserverUrl: String) throws -> String
}

public class LoginStore: LoginStoreProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(path: String, encryptionKey: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_new(path.lower(), encryptionKey.lower(), $0)
            })
    }

    deinit {
        try! rustCall { ffi_logins_f90f_LoginStore_object_free(pointer, $0) }
    }

    public static func newWithSalt(path: String, encryptionKey: String, salt: String) throws -> LoginStore {
        return LoginStore(unsafeFromRawPointer: try

            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_new_with_salt(path.lower(), encryptionKey.lower(), salt.lower(), $0)
            })
    }

    public func checkValidWithNoDupes(login: Login) throws {
        try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_check_valid_with_no_dupes(self.pointer, login.lower(), $0)
            }
    }

    public func add(login: Login) throws -> String {
        let _retval = try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_add(self.pointer, login.lower(), $0)
            }
        return try String.lift(_retval)
    }

    public func delete(id: String) throws -> Bool {
        let _retval = try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_delete(self.pointer, id.lower(), $0)
            }
        return try Bool.lift(_retval)
    }

    public func wipe() throws {
        try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_wipe(self.pointer, $0)
            }
    }

    public func wipeLocal() throws {
        try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_wipe_local(self.pointer, $0)
            }
    }

    public func reset() throws {
        try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_reset(self.pointer, $0)
            }
    }

    public func disableMemSecurity() throws {
        try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_disable_mem_security(self.pointer, $0)
            }
    }

    public func rekeyDatabase(newEncryptionKey: String) throws {
        try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_rekey_database(self.pointer, newEncryptionKey.lower(), $0)
            }
    }

    public func touch(id: String) throws {
        try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_touch(self.pointer, id.lower(), $0)
            }
    }

    public func list() throws -> [Login] {
        let _retval = try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_list(self.pointer, $0)
            }
        return try [Login].lift(_retval)
    }

    public func getByBaseDomain(baseDomain: String) throws -> [Login] {
        let _retval = try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_get_by_base_domain(self.pointer, baseDomain.lower(), $0)
            }
        return try [Login].lift(_retval)
    }

    public func potentialDupesIgnoringUsername(login: Login) throws -> [Login] {
        let _retval = try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_potential_dupes_ignoring_username(self.pointer, login.lower(), $0)
            }
        return try [Login].lift(_retval)
    }

    public func get(id: String) throws -> Login? {
        let _retval = try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_get(self.pointer, id.lower(), $0)
            }
        return try Login?.lift(_retval)
    }

    public func update(login: Login) throws {
        try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_update(self.pointer, login.lower(), $0)
            }
    }

    public func importMultiple(login: [Login]) throws -> String {
        let _retval = try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_import_multiple(self.pointer, login.lower(), $0)
            }
        return try String.lift(_retval)
    }

    public func registerWithSyncManager() {
        try!
            rustCall {
                logins_f90f_LoginStore_register_with_sync_manager(self.pointer, $0)
            }
    }

    public func sync(keyId: String, accessToken: String, syncKey: String, tokenserverUrl: String) throws -> String {
        let _retval = try
            rustCallWithError(LoginsStorageError.self) {
                logins_f90f_LoginStore_sync(self.pointer, keyId.lower(), accessToken.lower(), syncKey.lower(), tokenserverUrl.lower(), $0)
            }
        return try String.lift(_retval)
    }
}

private extension LoginStore {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension LoginStore: ViaFfi, Serializable {}
