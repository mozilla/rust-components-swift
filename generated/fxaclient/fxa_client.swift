// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(MozillaRustComponents)
    import MozillaRustComponents
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            try! rustCall { ffi_fxa_client_50a2_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_fxa_client_50a2_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Types conforming to `Serializable` can be read and written in a bytebuffer.
private protocol Serializable {
    func write(into: Writer)
    static func read(from: Reader) throws -> Self
}

// Types confirming to `ViaFfi` can be transferred back-and-for over the FFI.
// This is analogous to the Rust trait of the same name.
private protocol ViaFfi: Serializable {
    associatedtype FfiType
    static func lift(_ v: FfiType) throws -> Self
    func lower() -> FfiType
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol Primitive {}

private extension Primitive {
    typealias FfiType = Self

    static func lift(_ v: Self) throws -> Self {
        return v
    }

    func lower() -> Self {
        return self
    }
}

// Types conforming to `ViaFfiUsingByteBuffer` lift and lower into a bytebuffer.
// Use this for complex types where it's hard to write a custom lift/lower.
private protocol ViaFfiUsingByteBuffer: Serializable {}

private extension ViaFfiUsingByteBuffer {
    typealias FfiType = RustBuffer

    static func lift(_ buf: RustBuffer) throws -> Self {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try Self.read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    func lower() -> RustBuffer {
        let writer = Writer()
        write(into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// Implement our protocols for the built-in types that we use.

extension Optional: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Wrapped: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try Wrapped.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }

    fileprivate func write(into buf: Writer) {
        guard let value = self else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        value.write(into: buf)
    }
}

extension Array: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Element: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        var seq = [Element]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try Element.read(from: buf))
        }
        return seq
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(count)
        buf.writeInt(len)
        for item in self {
            item.write(into: buf)
        }
    }
}

extension Dictionary: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Key == String, Value: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        var dict = [String: Value]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            dict[try String.read(from: buf)] = try Value.read(from: buf)
        }
        return dict
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(count)
        buf.writeInt(len)
        for (key, value) in self {
            key.write(into: buf)
            value.write(into: buf)
        }
    }
}

extension Int64: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Int64 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension Bool: ViaFfi {
    fileprivate typealias FfiType = Int8

    fileprivate static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }

    fileprivate static func lift(_ v: Int8) throws -> Bool {
        return v != 0
    }

    fileprivate func lower() -> Int8 {
        return self ? 1 : 0
    }
}

extension String: ViaFfi {
    fileprivate typealias FfiType = RustBuffer

    fileprivate static func lift(_ v: FfiType) throws -> Self {
        defer {
            try! rustCall { ffi_fxa_client_50a2_rustbuffer_free(v, $0) }
        }
        if v.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: v.data!, count: Int(v.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    fileprivate func lower() -> FfiType {
        return utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                let bytes = ForeignBytes(bufferPointer: buf)
                return try! rustCall { ffi_fxa_client_50a2_rustbuffer_from_bytes(bytes, $0) }
            }
        }
    }

    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(utf8.count)
        buf.writeInt(len)
        buf.writeBytes(utf8)
    }
}

// Public interface members begin here.

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum DeviceType {
    case desktop
    case mobile
    case tablet
    case vr
    case tv
    case unknown
}

extension DeviceType: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> DeviceType {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .desktop
        case 2: return .mobile
        case 3: return .tablet
        case 4: return .vr
        case 5: return .tv
        case 6: return .unknown
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case .desktop:
            buf.writeInt(Int32(1))

        case .mobile:
            buf.writeInt(Int32(2))

        case .tablet:
            buf.writeInt(Int32(3))

        case .vr:
            buf.writeInt(Int32(4))

        case .tv:
            buf.writeInt(Int32(5))

        case .unknown:
            buf.writeInt(Int32(6))
        }
    }
}

extension DeviceType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum DeviceCapability {
    case sendTab
}

extension DeviceCapability: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> DeviceCapability {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .sendTab
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case .sendTab:
            buf.writeInt(Int32(1))
        }
    }
}

extension DeviceCapability: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum AccountEvent {
    case commandReceived(command: IncomingDeviceCommand)
    case profileUpdated
    case accountAuthStateChanged
    case accountDestroyed
    case deviceConnected(deviceName: String)
    case deviceDisconnected(deviceId: String, isLocalDevice: Bool)
}

extension AccountEvent: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> AccountEvent {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .commandReceived(
                command: try IncomingDeviceCommand.read(from: buf)
            )
        case 2: return .profileUpdated
        case 3: return .accountAuthStateChanged
        case 4: return .accountDestroyed
        case 5: return .deviceConnected(
                deviceName: try String.read(from: buf)
            )
        case 6: return .deviceDisconnected(
                deviceId: try String.read(from: buf),
                isLocalDevice: try Bool.read(from: buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .commandReceived(command):
            buf.writeInt(Int32(1))
            command.write(into: buf)

        case .profileUpdated:
            buf.writeInt(Int32(2))

        case .accountAuthStateChanged:
            buf.writeInt(Int32(3))

        case .accountDestroyed:
            buf.writeInt(Int32(4))

        case let .deviceConnected(deviceName):
            buf.writeInt(Int32(5))
            deviceName.write(into: buf)

        case let .deviceDisconnected(deviceId, isLocalDevice):
            buf.writeInt(Int32(6))
            deviceId.write(into: buf)
            isLocalDevice.write(into: buf)
        }
    }
}

extension AccountEvent: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum IncomingDeviceCommand {
    case tabReceived(sender: Device?, payload: SendTabPayload)
}

extension IncomingDeviceCommand: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> IncomingDeviceCommand {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .tabReceived(
                sender: try Device?.read(from: buf),
                payload: try SendTabPayload.read(from: buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .tabReceived(sender, payload):
            buf.writeInt(Int32(1))
            sender.write(into: buf)
            payload.write(into: buf)
        }
    }
}

extension IncomingDeviceCommand: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MigrationState {
    case none
    case copySessionToken
    case reuseSessionToken
}

extension MigrationState: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> MigrationState {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .none
        case 2: return .copySessionToken
        case 3: return .reuseSessionToken
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case .none:
            buf.writeInt(Int32(1))

        case .copySessionToken:
            buf.writeInt(Int32(2))

        case .reuseSessionToken:
            buf.writeInt(Int32(3))
        }
    }
}

extension MigrationState: Equatable, Hashable {}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

public enum FxaError {
    // Simple error enums only carry a message
    case Authentication(message: String)

    // Simple error enums only carry a message
    case Network(message: String)

    // Simple error enums only carry a message
    case NoExistingAuthFlow(message: String)

    // Simple error enums only carry a message
    case WrongAuthFlow(message: String)

    // Simple error enums only carry a message
    case Panic(message: String)

    // Simple error enums only carry a message
    case Other(message: String)
}

extension FxaError: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> FxaError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .Authentication(
                message: try String.read(from: buf)
            )

        case 2: return .Network(
                message: try String.read(from: buf)
            )

        case 3: return .NoExistingAuthFlow(
                message: try String.read(from: buf)
            )

        case 4: return .WrongAuthFlow(
                message: try String.read(from: buf)
            )

        case 5: return .Panic(
                message: try String.read(from: buf)
            )

        case 6: return .Other(
                message: try String.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .Authentication(message):
            buf.writeInt(Int32(1))
            message.write(into: buf)
        case let .Network(message):
            buf.writeInt(Int32(2))
            message.write(into: buf)
        case let .NoExistingAuthFlow(message):
            buf.writeInt(Int32(3))
            message.write(into: buf)
        case let .WrongAuthFlow(message):
            buf.writeInt(Int32(4))
            message.write(into: buf)
        case let .Panic(message):
            buf.writeInt(Int32(5))
            message.write(into: buf)
        case let .Other(message):
            buf.writeInt(Int32(6))
            message.write(into: buf)
        }
    }
}

extension FxaError: Equatable, Hashable {}

extension FxaError: Error {}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, E: ViaFfiUsingByteBuffer & Error>(_: E.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: { try E.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try String.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

public struct AuthorizationInfo {
    public var active: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(active: Bool) {
        self.active = active
    }
}

extension AuthorizationInfo: Equatable, Hashable {
    public static func == (lhs: AuthorizationInfo, rhs: AuthorizationInfo) -> Bool {
        if lhs.active != rhs.active {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(active)
    }
}

private extension AuthorizationInfo {
    static func read(from buf: Reader) throws -> AuthorizationInfo {
        return try AuthorizationInfo(
            active: Bool.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        active.write(into: buf)
    }
}

extension AuthorizationInfo: ViaFfiUsingByteBuffer, ViaFfi {}

public struct MetricsParams {
    public var parameters: [String: String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(parameters: [String: String]) {
        self.parameters = parameters
    }
}

extension MetricsParams: Equatable, Hashable {
    public static func == (lhs: MetricsParams, rhs: MetricsParams) -> Bool {
        if lhs.parameters != rhs.parameters {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(parameters)
    }
}

private extension MetricsParams {
    static func read(from buf: Reader) throws -> MetricsParams {
        return try MetricsParams(
            parameters: [String: String].read(from: buf)
        )
    }

    func write(into buf: Writer) {
        parameters.write(into: buf)
    }
}

extension MetricsParams: ViaFfiUsingByteBuffer, ViaFfi {}

public struct AccessTokenInfo {
    public var scope: String
    public var token: String
    public var key: ScopedKey?
    public var expiresAt: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(scope: String, token: String, key: ScopedKey?, expiresAt: Int64) {
        self.scope = scope
        self.token = token
        self.key = key
        self.expiresAt = expiresAt
    }
}

extension AccessTokenInfo: Equatable, Hashable {
    public static func == (lhs: AccessTokenInfo, rhs: AccessTokenInfo) -> Bool {
        if lhs.scope != rhs.scope {
            return false
        }
        if lhs.token != rhs.token {
            return false
        }
        if lhs.key != rhs.key {
            return false
        }
        if lhs.expiresAt != rhs.expiresAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(scope)
        hasher.combine(token)
        hasher.combine(key)
        hasher.combine(expiresAt)
    }
}

private extension AccessTokenInfo {
    static func read(from buf: Reader) throws -> AccessTokenInfo {
        return try AccessTokenInfo(
            scope: String.read(from: buf),
            token: String.read(from: buf),
            key: ScopedKey?.read(from: buf),
            expiresAt: Int64.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        scope.write(into: buf)
        token.write(into: buf)
        key.write(into: buf)
        expiresAt.write(into: buf)
    }
}

extension AccessTokenInfo: ViaFfiUsingByteBuffer, ViaFfi {}

public struct ScopedKey {
    public var kty: String
    public var scope: String
    public var k: String
    public var kid: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(kty: String, scope: String, k: String, kid: String) {
        self.kty = kty
        self.scope = scope
        self.k = k
        self.kid = kid
    }
}

extension ScopedKey: Equatable, Hashable {
    public static func == (lhs: ScopedKey, rhs: ScopedKey) -> Bool {
        if lhs.kty != rhs.kty {
            return false
        }
        if lhs.scope != rhs.scope {
            return false
        }
        if lhs.k != rhs.k {
            return false
        }
        if lhs.kid != rhs.kid {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(kty)
        hasher.combine(scope)
        hasher.combine(k)
        hasher.combine(kid)
    }
}

private extension ScopedKey {
    static func read(from buf: Reader) throws -> ScopedKey {
        return try ScopedKey(
            kty: String.read(from: buf),
            scope: String.read(from: buf),
            k: String.read(from: buf),
            kid: String.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        kty.write(into: buf)
        scope.write(into: buf)
        k.write(into: buf)
        kid.write(into: buf)
    }
}

extension ScopedKey: ViaFfiUsingByteBuffer, ViaFfi {}

public struct AuthorizationParameters {
    public var clientId: String
    public var scope: [String]
    public var state: String
    public var accessType: String
    public var codeChallenge: String?
    public var codeChallengeMethod: String?
    public var keysJwk: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(clientId: String, scope: [String], state: String, accessType: String, codeChallenge: String?, codeChallengeMethod: String?, keysJwk: String?) {
        self.clientId = clientId
        self.scope = scope
        self.state = state
        self.accessType = accessType
        self.codeChallenge = codeChallenge
        self.codeChallengeMethod = codeChallengeMethod
        self.keysJwk = keysJwk
    }
}

extension AuthorizationParameters: Equatable, Hashable {
    public static func == (lhs: AuthorizationParameters, rhs: AuthorizationParameters) -> Bool {
        if lhs.clientId != rhs.clientId {
            return false
        }
        if lhs.scope != rhs.scope {
            return false
        }
        if lhs.state != rhs.state {
            return false
        }
        if lhs.accessType != rhs.accessType {
            return false
        }
        if lhs.codeChallenge != rhs.codeChallenge {
            return false
        }
        if lhs.codeChallengeMethod != rhs.codeChallengeMethod {
            return false
        }
        if lhs.keysJwk != rhs.keysJwk {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(clientId)
        hasher.combine(scope)
        hasher.combine(state)
        hasher.combine(accessType)
        hasher.combine(codeChallenge)
        hasher.combine(codeChallengeMethod)
        hasher.combine(keysJwk)
    }
}

private extension AuthorizationParameters {
    static func read(from buf: Reader) throws -> AuthorizationParameters {
        return try AuthorizationParameters(
            clientId: String.read(from: buf),
            scope: [String].read(from: buf),
            state: String.read(from: buf),
            accessType: String.read(from: buf),
            codeChallenge: String?.read(from: buf),
            codeChallengeMethod: String?.read(from: buf),
            keysJwk: String?.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        clientId.write(into: buf)
        scope.write(into: buf)
        state.write(into: buf)
        accessType.write(into: buf)
        codeChallenge.write(into: buf)
        codeChallengeMethod.write(into: buf)
        keysJwk.write(into: buf)
    }
}

extension AuthorizationParameters: ViaFfiUsingByteBuffer, ViaFfi {}

public struct Device {
    public var id: String
    public var displayName: String
    public var deviceType: DeviceType
    public var capabilities: [DeviceCapability]
    public var pushSubscription: DevicePushSubscription?
    public var pushEndpointExpired: Bool
    public var isCurrentDevice: Bool
    public var lastAccessTime: Int64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, displayName: String, deviceType: DeviceType, capabilities: [DeviceCapability], pushSubscription: DevicePushSubscription?, pushEndpointExpired: Bool, isCurrentDevice: Bool, lastAccessTime: Int64?) {
        self.id = id
        self.displayName = displayName
        self.deviceType = deviceType
        self.capabilities = capabilities
        self.pushSubscription = pushSubscription
        self.pushEndpointExpired = pushEndpointExpired
        self.isCurrentDevice = isCurrentDevice
        self.lastAccessTime = lastAccessTime
    }
}

extension Device: Equatable, Hashable {
    public static func == (lhs: Device, rhs: Device) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.displayName != rhs.displayName {
            return false
        }
        if lhs.deviceType != rhs.deviceType {
            return false
        }
        if lhs.capabilities != rhs.capabilities {
            return false
        }
        if lhs.pushSubscription != rhs.pushSubscription {
            return false
        }
        if lhs.pushEndpointExpired != rhs.pushEndpointExpired {
            return false
        }
        if lhs.isCurrentDevice != rhs.isCurrentDevice {
            return false
        }
        if lhs.lastAccessTime != rhs.lastAccessTime {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(displayName)
        hasher.combine(deviceType)
        hasher.combine(capabilities)
        hasher.combine(pushSubscription)
        hasher.combine(pushEndpointExpired)
        hasher.combine(isCurrentDevice)
        hasher.combine(lastAccessTime)
    }
}

private extension Device {
    static func read(from buf: Reader) throws -> Device {
        return try Device(
            id: String.read(from: buf),
            displayName: String.read(from: buf),
            deviceType: DeviceType.read(from: buf),
            capabilities: [DeviceCapability].read(from: buf),
            pushSubscription: DevicePushSubscription?.read(from: buf),
            pushEndpointExpired: Bool.read(from: buf),
            isCurrentDevice: Bool.read(from: buf),
            lastAccessTime: Int64?.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        id.write(into: buf)
        displayName.write(into: buf)
        deviceType.write(into: buf)
        capabilities.write(into: buf)
        pushSubscription.write(into: buf)
        pushEndpointExpired.write(into: buf)
        isCurrentDevice.write(into: buf)
        lastAccessTime.write(into: buf)
    }
}

extension Device: ViaFfiUsingByteBuffer, ViaFfi {}

public struct DevicePushSubscription {
    public var endpoint: String
    public var publicKey: String
    public var authKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(endpoint: String, publicKey: String, authKey: String) {
        self.endpoint = endpoint
        self.publicKey = publicKey
        self.authKey = authKey
    }
}

extension DevicePushSubscription: Equatable, Hashable {
    public static func == (lhs: DevicePushSubscription, rhs: DevicePushSubscription) -> Bool {
        if lhs.endpoint != rhs.endpoint {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.authKey != rhs.authKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(endpoint)
        hasher.combine(publicKey)
        hasher.combine(authKey)
    }
}

private extension DevicePushSubscription {
    static func read(from buf: Reader) throws -> DevicePushSubscription {
        return try DevicePushSubscription(
            endpoint: String.read(from: buf),
            publicKey: String.read(from: buf),
            authKey: String.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        endpoint.write(into: buf)
        publicKey.write(into: buf)
        authKey.write(into: buf)
    }
}

extension DevicePushSubscription: ViaFfiUsingByteBuffer, ViaFfi {}

public struct SendTabPayload {
    public var entries: [TabHistoryEntry]
    public var flowId: String
    public var streamId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(entries: [TabHistoryEntry], flowId: String, streamId: String) {
        self.entries = entries
        self.flowId = flowId
        self.streamId = streamId
    }
}

extension SendTabPayload: Equatable, Hashable {
    public static func == (lhs: SendTabPayload, rhs: SendTabPayload) -> Bool {
        if lhs.entries != rhs.entries {
            return false
        }
        if lhs.flowId != rhs.flowId {
            return false
        }
        if lhs.streamId != rhs.streamId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(entries)
        hasher.combine(flowId)
        hasher.combine(streamId)
    }
}

private extension SendTabPayload {
    static func read(from buf: Reader) throws -> SendTabPayload {
        return try SendTabPayload(
            entries: [TabHistoryEntry].read(from: buf),
            flowId: String.read(from: buf),
            streamId: String.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        entries.write(into: buf)
        flowId.write(into: buf)
        streamId.write(into: buf)
    }
}

extension SendTabPayload: ViaFfiUsingByteBuffer, ViaFfi {}

public struct TabHistoryEntry {
    public var title: String
    public var url: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(title: String, url: String) {
        self.title = title
        self.url = url
    }
}

extension TabHistoryEntry: Equatable, Hashable {
    public static func == (lhs: TabHistoryEntry, rhs: TabHistoryEntry) -> Bool {
        if lhs.title != rhs.title {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(title)
        hasher.combine(url)
    }
}

private extension TabHistoryEntry {
    static func read(from buf: Reader) throws -> TabHistoryEntry {
        return try TabHistoryEntry(
            title: String.read(from: buf),
            url: String.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        title.write(into: buf)
        url.write(into: buf)
    }
}

extension TabHistoryEntry: ViaFfiUsingByteBuffer, ViaFfi {}

public struct AttachedClient {
    public var clientId: String?
    public var deviceId: String?
    public var deviceType: DeviceType?
    public var isCurrentSession: Bool
    public var name: String?
    public var createdTime: Int64?
    public var lastAccessTime: Int64?
    public var scope: [String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(clientId: String?, deviceId: String?, deviceType: DeviceType?, isCurrentSession: Bool, name: String?, createdTime: Int64?, lastAccessTime: Int64?, scope: [String]?) {
        self.clientId = clientId
        self.deviceId = deviceId
        self.deviceType = deviceType
        self.isCurrentSession = isCurrentSession
        self.name = name
        self.createdTime = createdTime
        self.lastAccessTime = lastAccessTime
        self.scope = scope
    }
}

extension AttachedClient: Equatable, Hashable {
    public static func == (lhs: AttachedClient, rhs: AttachedClient) -> Bool {
        if lhs.clientId != rhs.clientId {
            return false
        }
        if lhs.deviceId != rhs.deviceId {
            return false
        }
        if lhs.deviceType != rhs.deviceType {
            return false
        }
        if lhs.isCurrentSession != rhs.isCurrentSession {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.createdTime != rhs.createdTime {
            return false
        }
        if lhs.lastAccessTime != rhs.lastAccessTime {
            return false
        }
        if lhs.scope != rhs.scope {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(clientId)
        hasher.combine(deviceId)
        hasher.combine(deviceType)
        hasher.combine(isCurrentSession)
        hasher.combine(name)
        hasher.combine(createdTime)
        hasher.combine(lastAccessTime)
        hasher.combine(scope)
    }
}

private extension AttachedClient {
    static func read(from buf: Reader) throws -> AttachedClient {
        return try AttachedClient(
            clientId: String?.read(from: buf),
            deviceId: String?.read(from: buf),
            deviceType: DeviceType?.read(from: buf),
            isCurrentSession: Bool.read(from: buf),
            name: String?.read(from: buf),
            createdTime: Int64?.read(from: buf),
            lastAccessTime: Int64?.read(from: buf),
            scope: [String]?.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        clientId.write(into: buf)
        deviceId.write(into: buf)
        deviceType.write(into: buf)
        isCurrentSession.write(into: buf)
        name.write(into: buf)
        createdTime.write(into: buf)
        lastAccessTime.write(into: buf)
        scope.write(into: buf)
    }
}

extension AttachedClient: ViaFfiUsingByteBuffer, ViaFfi {}

public struct Profile {
    public var uid: String
    public var email: String
    public var displayName: String?
    public var avatar: String
    public var isDefaultAvatar: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uid: String, email: String, displayName: String?, avatar: String, isDefaultAvatar: Bool) {
        self.uid = uid
        self.email = email
        self.displayName = displayName
        self.avatar = avatar
        self.isDefaultAvatar = isDefaultAvatar
    }
}

extension Profile: Equatable, Hashable {
    public static func == (lhs: Profile, rhs: Profile) -> Bool {
        if lhs.uid != rhs.uid {
            return false
        }
        if lhs.email != rhs.email {
            return false
        }
        if lhs.displayName != rhs.displayName {
            return false
        }
        if lhs.avatar != rhs.avatar {
            return false
        }
        if lhs.isDefaultAvatar != rhs.isDefaultAvatar {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uid)
        hasher.combine(email)
        hasher.combine(displayName)
        hasher.combine(avatar)
        hasher.combine(isDefaultAvatar)
    }
}

private extension Profile {
    static func read(from buf: Reader) throws -> Profile {
        return try Profile(
            uid: String.read(from: buf),
            email: String.read(from: buf),
            displayName: String?.read(from: buf),
            avatar: String.read(from: buf),
            isDefaultAvatar: Bool.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        uid.write(into: buf)
        email.write(into: buf)
        displayName.write(into: buf)
        avatar.write(into: buf)
        isDefaultAvatar.write(into: buf)
    }
}

extension Profile: ViaFfiUsingByteBuffer, ViaFfi {}

public struct FxAMigrationResult {
    public var totalDuration: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(totalDuration: Int64) {
        self.totalDuration = totalDuration
    }
}

extension FxAMigrationResult: Equatable, Hashable {
    public static func == (lhs: FxAMigrationResult, rhs: FxAMigrationResult) -> Bool {
        if lhs.totalDuration != rhs.totalDuration {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(totalDuration)
    }
}

private extension FxAMigrationResult {
    static func read(from buf: Reader) throws -> FxAMigrationResult {
        return try FxAMigrationResult(
            totalDuration: Int64.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        totalDuration.write(into: buf)
    }
}

extension FxAMigrationResult: ViaFfiUsingByteBuffer, ViaFfi {}

public protocol FirefoxAccountProtocol {
    func toJson() throws -> String
    func beginOauthFlow(scopes: [String], entrypoint: String, metrics: MetricsParams?) throws -> String
    func getPairingAuthorityUrl() throws -> String
    func beginPairingFlow(pairingUrl: String, scopes: [String], entrypoint: String, metrics: MetricsParams?) throws -> String
    func completeOauthFlow(code: String, state: String) throws
    func checkAuthorizationStatus() throws -> AuthorizationInfo
    func disconnect()
    func getProfile(ignoreCache: Bool) throws -> Profile
    func initializeDevice(name: String, deviceType: DeviceType, supportedCapabilities: [DeviceCapability]) throws
    func getCurrentDeviceId() throws -> String
    func getDevices(ignoreCache: Bool) throws -> [Device]
    func getAttachedClients() throws -> [AttachedClient]
    func setDeviceName(displayName: String) throws
    func clearDeviceName() throws
    func ensureCapabilities(supportedCapabilities: [DeviceCapability]) throws
    func setPushSubscription(subscription: DevicePushSubscription) throws
    func handlePushMessage(payload: String) throws -> [AccountEvent]
    func pollDeviceCommands() throws -> [IncomingDeviceCommand]
    func sendSingleTab(targetDeviceId: String, title: String, url: String) throws
    func getTokenServerEndpointUrl() throws -> String
    func getConnectionSuccessUrl() throws -> String
    func getManageAccountUrl(entrypoint: String) throws -> String
    func getManageDevicesUrl(entrypoint: String) throws -> String
    func getAccessToken(scope: String, ttl: Int64?) throws -> AccessTokenInfo
    func getSessionToken() throws -> String
    func handleSessionTokenChange(sessionToken: String) throws
    func authorizeCodeUsingSessionToken(params: AuthorizationParameters) throws -> String
    func clearAccessTokenCache()
    func gatherTelemetry() throws -> String
    func migrateFromSessionToken(sessionToken: String, kSync: String, kXcs: String, copySessionToken: Bool) throws -> FxAMigrationResult
    func retryMigrateFromSessionToken() throws -> FxAMigrationResult
    func isInMigrationState() -> MigrationState
}

public class FirefoxAccount: FirefoxAccountProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(contentUrl: String, clientId: String, redirectUri: String, tokenServerUrlOverride: String?) {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                fxa_client_50a2_FirefoxAccount_new(contentUrl.lower(), clientId.lower(), redirectUri.lower(), tokenServerUrlOverride.lower(), $0)
            })
    }

    deinit {
        try! rustCall { ffi_fxa_client_50a2_FirefoxAccount_object_free(pointer, $0) }
    }

    public static func fromJson(data: String) throws -> FirefoxAccount {
        return FirefoxAccount(unsafeFromRawPointer: try

            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_from_json(data.lower(), $0)
            })
    }

    public func toJson() throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_to_json(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func beginOauthFlow(scopes: [String], entrypoint: String, metrics: MetricsParams?) throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_begin_oauth_flow(self.pointer, scopes.lower(), entrypoint.lower(), metrics.lower(), $0)
            }
        return try String.lift(_retval)
    }

    public func getPairingAuthorityUrl() throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_pairing_authority_url(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func beginPairingFlow(pairingUrl: String, scopes: [String], entrypoint: String, metrics: MetricsParams?) throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_begin_pairing_flow(self.pointer, pairingUrl.lower(), scopes.lower(), entrypoint.lower(), metrics.lower(), $0)
            }
        return try String.lift(_retval)
    }

    public func completeOauthFlow(code: String, state: String) throws {
        try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_complete_oauth_flow(self.pointer, code.lower(), state.lower(), $0)
            }
    }

    public func checkAuthorizationStatus() throws -> AuthorizationInfo {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_check_authorization_status(self.pointer, $0)
            }
        return try AuthorizationInfo.lift(_retval)
    }

    public func disconnect() {
        try!
            rustCall {
                fxa_client_50a2_FirefoxAccount_disconnect(self.pointer, $0)
            }
    }

    public func getProfile(ignoreCache: Bool) throws -> Profile {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_profile(self.pointer, ignoreCache.lower(), $0)
            }
        return try Profile.lift(_retval)
    }

    public func initializeDevice(name: String, deviceType: DeviceType, supportedCapabilities: [DeviceCapability]) throws {
        try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_initialize_device(self.pointer, name.lower(), deviceType.lower(), supportedCapabilities.lower(), $0)
            }
    }

    public func getCurrentDeviceId() throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_current_device_id(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func getDevices(ignoreCache: Bool) throws -> [Device] {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_devices(self.pointer, ignoreCache.lower(), $0)
            }
        return try [Device].lift(_retval)
    }

    public func getAttachedClients() throws -> [AttachedClient] {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_attached_clients(self.pointer, $0)
            }
        return try [AttachedClient].lift(_retval)
    }

    public func setDeviceName(displayName: String) throws {
        try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_set_device_name(self.pointer, displayName.lower(), $0)
            }
    }

    public func clearDeviceName() throws {
        try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_clear_device_name(self.pointer, $0)
            }
    }

    public func ensureCapabilities(supportedCapabilities: [DeviceCapability]) throws {
        try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_ensure_capabilities(self.pointer, supportedCapabilities.lower(), $0)
            }
    }

    public func setPushSubscription(subscription: DevicePushSubscription) throws {
        try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_set_push_subscription(self.pointer, subscription.lower(), $0)
            }
    }

    public func handlePushMessage(payload: String) throws -> [AccountEvent] {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_handle_push_message(self.pointer, payload.lower(), $0)
            }
        return try [AccountEvent].lift(_retval)
    }

    public func pollDeviceCommands() throws -> [IncomingDeviceCommand] {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_poll_device_commands(self.pointer, $0)
            }
        return try [IncomingDeviceCommand].lift(_retval)
    }

    public func sendSingleTab(targetDeviceId: String, title: String, url: String) throws {
        try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_send_single_tab(self.pointer, targetDeviceId.lower(), title.lower(), url.lower(), $0)
            }
    }

    public func getTokenServerEndpointUrl() throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_token_server_endpoint_url(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func getConnectionSuccessUrl() throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_connection_success_url(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func getManageAccountUrl(entrypoint: String) throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_manage_account_url(self.pointer, entrypoint.lower(), $0)
            }
        return try String.lift(_retval)
    }

    public func getManageDevicesUrl(entrypoint: String) throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_manage_devices_url(self.pointer, entrypoint.lower(), $0)
            }
        return try String.lift(_retval)
    }

    public func getAccessToken(scope: String, ttl: Int64?) throws -> AccessTokenInfo {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_access_token(self.pointer, scope.lower(), ttl.lower(), $0)
            }
        return try AccessTokenInfo.lift(_retval)
    }

    public func getSessionToken() throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_get_session_token(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func handleSessionTokenChange(sessionToken: String) throws {
        try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_handle_session_token_change(self.pointer, sessionToken.lower(), $0)
            }
    }

    public func authorizeCodeUsingSessionToken(params: AuthorizationParameters) throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_authorize_code_using_session_token(self.pointer, params.lower(), $0)
            }
        return try String.lift(_retval)
    }

    public func clearAccessTokenCache() {
        try!
            rustCall {
                fxa_client_50a2_FirefoxAccount_clear_access_token_cache(self.pointer, $0)
            }
    }

    public func gatherTelemetry() throws -> String {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_gather_telemetry(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func migrateFromSessionToken(sessionToken: String, kSync: String, kXcs: String, copySessionToken: Bool) throws -> FxAMigrationResult {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_migrate_from_session_token(self.pointer, sessionToken.lower(), kSync.lower(), kXcs.lower(), copySessionToken.lower(), $0)
            }
        return try FxAMigrationResult.lift(_retval)
    }

    public func retryMigrateFromSessionToken() throws -> FxAMigrationResult {
        let _retval = try
            rustCallWithError(FxaError.self) {
                fxa_client_50a2_FirefoxAccount_retry_migrate_from_session_token(self.pointer, $0)
            }
        return try FxAMigrationResult.lift(_retval)
    }

    public func isInMigrationState() -> MigrationState {
        let _retval = try!
            rustCall {
                fxa_client_50a2_FirefoxAccount_is_in_migration_state(self.pointer, $0)
            }
        return try! MigrationState.lift(_retval)
    }
}

private extension FirefoxAccount {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension FirefoxAccount: ViaFfi, Serializable {}
