// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(MozillaRustComponents)
    import MozillaRustComponents
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            try! rustCall { ffi_autofill_4174_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_autofill_4174_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Types conforming to `Serializable` can be read and written in a bytebuffer.
private protocol Serializable {
    func write(into: Writer)
    static func read(from: Reader) throws -> Self
}

// Types confirming to `ViaFfi` can be transferred back-and-for over the FFI.
// This is analogous to the Rust trait of the same name.
private protocol ViaFfi: Serializable {
    associatedtype FfiType
    static func lift(_ v: FfiType) throws -> Self
    func lower() -> FfiType
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol Primitive {}

private extension Primitive {
    typealias FfiType = Self

    static func lift(_ v: Self) throws -> Self {
        return v
    }

    func lower() -> Self {
        return self
    }
}

// Types conforming to `ViaFfiUsingByteBuffer` lift and lower into a bytebuffer.
// Use this for complex types where it's hard to write a custom lift/lower.
private protocol ViaFfiUsingByteBuffer: Serializable {}

private extension ViaFfiUsingByteBuffer {
    typealias FfiType = RustBuffer

    static func lift(_ buf: RustBuffer) throws -> Self {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try Self.read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    func lower() -> RustBuffer {
        let writer = Writer()
        write(into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// Implement our protocols for the built-in types that we use.

extension Optional: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Wrapped: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try Wrapped.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }

    fileprivate func write(into buf: Writer) {
        guard let value = self else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        value.write(into: buf)
    }
}

extension Array: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Element: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        var seq = [Element]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try Element.read(from: buf))
        }
        return seq
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(count)
        buf.writeInt(len)
        for item in self {
            item.write(into: buf)
        }
    }
}

extension Int64: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Int64 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension Bool: ViaFfi {
    fileprivate typealias FfiType = Int8

    fileprivate static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }

    fileprivate static func lift(_ v: Int8) throws -> Bool {
        return v != 0
    }

    fileprivate func lower() -> Int8 {
        return self ? 1 : 0
    }
}

extension String: ViaFfi {
    fileprivate typealias FfiType = RustBuffer

    fileprivate static func lift(_ v: FfiType) throws -> Self {
        defer {
            try! rustCall { ffi_autofill_4174_rustbuffer_free(v, $0) }
        }
        if v.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: v.data!, count: Int(v.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    fileprivate func lower() -> FfiType {
        return utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                let bytes = ForeignBytes(bufferPointer: buf)
                return try! rustCall { ffi_autofill_4174_rustbuffer_from_bytes(bytes, $0) }
            }
        }
    }

    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(utf8.count)
        buf.writeInt(len)
        buf.writeBytes(utf8)
    }
}

// Public interface members begin here.

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

public enum AutofillError {
    // Simple error enums only carry a message
    case OpenDatabaseError(message: String)

    // Simple error enums only carry a message
    case SqlError(message: String)

    // Simple error enums only carry a message
    case IoError(message: String)

    // Simple error enums only carry a message
    case InterruptedError(message: String)

    // Simple error enums only carry a message
    case IllegalDatabasePath(message: String)

    // Simple error enums only carry a message
    case Utf8Error(message: String)

    // Simple error enums only carry a message
    case JsonError(message: String)

    // Simple error enums only carry a message
    case InvalidSyncPayload(message: String)

    // Simple error enums only carry a message
    case MissingEncryptionKey(message: String)

    // Simple error enums only carry a message
    case CryptoError(message: String)

    // Simple error enums only carry a message
    case NoSuchRecord(message: String)
}

extension AutofillError: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> AutofillError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .OpenDatabaseError(
                message: try String.read(from: buf)
            )

        case 2: return .SqlError(
                message: try String.read(from: buf)
            )

        case 3: return .IoError(
                message: try String.read(from: buf)
            )

        case 4: return .InterruptedError(
                message: try String.read(from: buf)
            )

        case 5: return .IllegalDatabasePath(
                message: try String.read(from: buf)
            )

        case 6: return .Utf8Error(
                message: try String.read(from: buf)
            )

        case 7: return .JsonError(
                message: try String.read(from: buf)
            )

        case 8: return .InvalidSyncPayload(
                message: try String.read(from: buf)
            )

        case 9: return .MissingEncryptionKey(
                message: try String.read(from: buf)
            )

        case 10: return .CryptoError(
                message: try String.read(from: buf)
            )

        case 11: return .NoSuchRecord(
                message: try String.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .OpenDatabaseError(message):
            buf.writeInt(Int32(1))
            message.write(into: buf)
        case let .SqlError(message):
            buf.writeInt(Int32(2))
            message.write(into: buf)
        case let .IoError(message):
            buf.writeInt(Int32(3))
            message.write(into: buf)
        case let .InterruptedError(message):
            buf.writeInt(Int32(4))
            message.write(into: buf)
        case let .IllegalDatabasePath(message):
            buf.writeInt(Int32(5))
            message.write(into: buf)
        case let .Utf8Error(message):
            buf.writeInt(Int32(6))
            message.write(into: buf)
        case let .JsonError(message):
            buf.writeInt(Int32(7))
            message.write(into: buf)
        case let .InvalidSyncPayload(message):
            buf.writeInt(Int32(8))
            message.write(into: buf)
        case let .MissingEncryptionKey(message):
            buf.writeInt(Int32(9))
            message.write(into: buf)
        case let .CryptoError(message):
            buf.writeInt(Int32(10))
            message.write(into: buf)
        case let .NoSuchRecord(message):
            buf.writeInt(Int32(11))
            message.write(into: buf)
        }
    }
}

extension AutofillError: Equatable, Hashable {}

extension AutofillError: Error {}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, E: ViaFfiUsingByteBuffer & Error>(_: E.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: { try E.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try String.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

public struct UpdatableCreditCardFields {
    public var ccName: String
    public var ccNumberEnc: String
    public var ccNumberLast4: String
    public var ccExpMonth: Int64
    public var ccExpYear: Int64
    public var ccType: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ccName: String, ccNumberEnc: String, ccNumberLast4: String, ccExpMonth: Int64, ccExpYear: Int64, ccType: String) {
        self.ccName = ccName
        self.ccNumberEnc = ccNumberEnc
        self.ccNumberLast4 = ccNumberLast4
        self.ccExpMonth = ccExpMonth
        self.ccExpYear = ccExpYear
        self.ccType = ccType
    }
}

extension UpdatableCreditCardFields: Equatable, Hashable {
    public static func == (lhs: UpdatableCreditCardFields, rhs: UpdatableCreditCardFields) -> Bool {
        if lhs.ccName != rhs.ccName {
            return false
        }
        if lhs.ccNumberEnc != rhs.ccNumberEnc {
            return false
        }
        if lhs.ccNumberLast4 != rhs.ccNumberLast4 {
            return false
        }
        if lhs.ccExpMonth != rhs.ccExpMonth {
            return false
        }
        if lhs.ccExpYear != rhs.ccExpYear {
            return false
        }
        if lhs.ccType != rhs.ccType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ccName)
        hasher.combine(ccNumberEnc)
        hasher.combine(ccNumberLast4)
        hasher.combine(ccExpMonth)
        hasher.combine(ccExpYear)
        hasher.combine(ccType)
    }
}

private extension UpdatableCreditCardFields {
    static func read(from buf: Reader) throws -> UpdatableCreditCardFields {
        return try UpdatableCreditCardFields(
            ccName: String.read(from: buf),
            ccNumberEnc: String.read(from: buf),
            ccNumberLast4: String.read(from: buf),
            ccExpMonth: Int64.read(from: buf),
            ccExpYear: Int64.read(from: buf),
            ccType: String.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        ccName.write(into: buf)
        ccNumberEnc.write(into: buf)
        ccNumberLast4.write(into: buf)
        ccExpMonth.write(into: buf)
        ccExpYear.write(into: buf)
        ccType.write(into: buf)
    }
}

extension UpdatableCreditCardFields: ViaFfiUsingByteBuffer, ViaFfi {}

public struct CreditCard {
    public var guid: String
    public var ccName: String
    public var ccNumberEnc: String
    public var ccNumberLast4: String
    public var ccExpMonth: Int64
    public var ccExpYear: Int64
    public var ccType: String
    public var timeCreated: Int64
    public var timeLastUsed: Int64?
    public var timeLastModified: Int64
    public var timesUsed: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(guid: String, ccName: String, ccNumberEnc: String, ccNumberLast4: String, ccExpMonth: Int64, ccExpYear: Int64, ccType: String, timeCreated: Int64, timeLastUsed: Int64?, timeLastModified: Int64, timesUsed: Int64) {
        self.guid = guid
        self.ccName = ccName
        self.ccNumberEnc = ccNumberEnc
        self.ccNumberLast4 = ccNumberLast4
        self.ccExpMonth = ccExpMonth
        self.ccExpYear = ccExpYear
        self.ccType = ccType
        self.timeCreated = timeCreated
        self.timeLastUsed = timeLastUsed
        self.timeLastModified = timeLastModified
        self.timesUsed = timesUsed
    }
}

extension CreditCard: Equatable, Hashable {
    public static func == (lhs: CreditCard, rhs: CreditCard) -> Bool {
        if lhs.guid != rhs.guid {
            return false
        }
        if lhs.ccName != rhs.ccName {
            return false
        }
        if lhs.ccNumberEnc != rhs.ccNumberEnc {
            return false
        }
        if lhs.ccNumberLast4 != rhs.ccNumberLast4 {
            return false
        }
        if lhs.ccExpMonth != rhs.ccExpMonth {
            return false
        }
        if lhs.ccExpYear != rhs.ccExpYear {
            return false
        }
        if lhs.ccType != rhs.ccType {
            return false
        }
        if lhs.timeCreated != rhs.timeCreated {
            return false
        }
        if lhs.timeLastUsed != rhs.timeLastUsed {
            return false
        }
        if lhs.timeLastModified != rhs.timeLastModified {
            return false
        }
        if lhs.timesUsed != rhs.timesUsed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(guid)
        hasher.combine(ccName)
        hasher.combine(ccNumberEnc)
        hasher.combine(ccNumberLast4)
        hasher.combine(ccExpMonth)
        hasher.combine(ccExpYear)
        hasher.combine(ccType)
        hasher.combine(timeCreated)
        hasher.combine(timeLastUsed)
        hasher.combine(timeLastModified)
        hasher.combine(timesUsed)
    }
}

private extension CreditCard {
    static func read(from buf: Reader) throws -> CreditCard {
        return try CreditCard(
            guid: String.read(from: buf),
            ccName: String.read(from: buf),
            ccNumberEnc: String.read(from: buf),
            ccNumberLast4: String.read(from: buf),
            ccExpMonth: Int64.read(from: buf),
            ccExpYear: Int64.read(from: buf),
            ccType: String.read(from: buf),
            timeCreated: Int64.read(from: buf),
            timeLastUsed: Int64?.read(from: buf),
            timeLastModified: Int64.read(from: buf),
            timesUsed: Int64.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        guid.write(into: buf)
        ccName.write(into: buf)
        ccNumberEnc.write(into: buf)
        ccNumberLast4.write(into: buf)
        ccExpMonth.write(into: buf)
        ccExpYear.write(into: buf)
        ccType.write(into: buf)
        timeCreated.write(into: buf)
        timeLastUsed.write(into: buf)
        timeLastModified.write(into: buf)
        timesUsed.write(into: buf)
    }
}

extension CreditCard: ViaFfiUsingByteBuffer, ViaFfi {}

public struct UpdatableAddressFields {
    public var givenName: String
    public var additionalName: String
    public var familyName: String
    public var organization: String
    public var streetAddress: String
    public var addressLevel3: String
    public var addressLevel2: String
    public var addressLevel1: String
    public var postalCode: String
    public var country: String
    public var tel: String
    public var email: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(givenName: String, additionalName: String, familyName: String, organization: String, streetAddress: String, addressLevel3: String, addressLevel2: String, addressLevel1: String, postalCode: String, country: String, tel: String, email: String) {
        self.givenName = givenName
        self.additionalName = additionalName
        self.familyName = familyName
        self.organization = organization
        self.streetAddress = streetAddress
        self.addressLevel3 = addressLevel3
        self.addressLevel2 = addressLevel2
        self.addressLevel1 = addressLevel1
        self.postalCode = postalCode
        self.country = country
        self.tel = tel
        self.email = email
    }
}

extension UpdatableAddressFields: Equatable, Hashable {
    public static func == (lhs: UpdatableAddressFields, rhs: UpdatableAddressFields) -> Bool {
        if lhs.givenName != rhs.givenName {
            return false
        }
        if lhs.additionalName != rhs.additionalName {
            return false
        }
        if lhs.familyName != rhs.familyName {
            return false
        }
        if lhs.organization != rhs.organization {
            return false
        }
        if lhs.streetAddress != rhs.streetAddress {
            return false
        }
        if lhs.addressLevel3 != rhs.addressLevel3 {
            return false
        }
        if lhs.addressLevel2 != rhs.addressLevel2 {
            return false
        }
        if lhs.addressLevel1 != rhs.addressLevel1 {
            return false
        }
        if lhs.postalCode != rhs.postalCode {
            return false
        }
        if lhs.country != rhs.country {
            return false
        }
        if lhs.tel != rhs.tel {
            return false
        }
        if lhs.email != rhs.email {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(givenName)
        hasher.combine(additionalName)
        hasher.combine(familyName)
        hasher.combine(organization)
        hasher.combine(streetAddress)
        hasher.combine(addressLevel3)
        hasher.combine(addressLevel2)
        hasher.combine(addressLevel1)
        hasher.combine(postalCode)
        hasher.combine(country)
        hasher.combine(tel)
        hasher.combine(email)
    }
}

private extension UpdatableAddressFields {
    static func read(from buf: Reader) throws -> UpdatableAddressFields {
        return try UpdatableAddressFields(
            givenName: String.read(from: buf),
            additionalName: String.read(from: buf),
            familyName: String.read(from: buf),
            organization: String.read(from: buf),
            streetAddress: String.read(from: buf),
            addressLevel3: String.read(from: buf),
            addressLevel2: String.read(from: buf),
            addressLevel1: String.read(from: buf),
            postalCode: String.read(from: buf),
            country: String.read(from: buf),
            tel: String.read(from: buf),
            email: String.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        givenName.write(into: buf)
        additionalName.write(into: buf)
        familyName.write(into: buf)
        organization.write(into: buf)
        streetAddress.write(into: buf)
        addressLevel3.write(into: buf)
        addressLevel2.write(into: buf)
        addressLevel1.write(into: buf)
        postalCode.write(into: buf)
        country.write(into: buf)
        tel.write(into: buf)
        email.write(into: buf)
    }
}

extension UpdatableAddressFields: ViaFfiUsingByteBuffer, ViaFfi {}

public struct Address {
    public var guid: String
    public var givenName: String
    public var additionalName: String
    public var familyName: String
    public var organization: String
    public var streetAddress: String
    public var addressLevel3: String
    public var addressLevel2: String
    public var addressLevel1: String
    public var postalCode: String
    public var country: String
    public var tel: String
    public var email: String
    public var timeCreated: Int64
    public var timeLastUsed: Int64?
    public var timeLastModified: Int64
    public var timesUsed: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(guid: String, givenName: String, additionalName: String, familyName: String, organization: String, streetAddress: String, addressLevel3: String, addressLevel2: String, addressLevel1: String, postalCode: String, country: String, tel: String, email: String, timeCreated: Int64, timeLastUsed: Int64?, timeLastModified: Int64, timesUsed: Int64) {
        self.guid = guid
        self.givenName = givenName
        self.additionalName = additionalName
        self.familyName = familyName
        self.organization = organization
        self.streetAddress = streetAddress
        self.addressLevel3 = addressLevel3
        self.addressLevel2 = addressLevel2
        self.addressLevel1 = addressLevel1
        self.postalCode = postalCode
        self.country = country
        self.tel = tel
        self.email = email
        self.timeCreated = timeCreated
        self.timeLastUsed = timeLastUsed
        self.timeLastModified = timeLastModified
        self.timesUsed = timesUsed
    }
}

extension Address: Equatable, Hashable {
    public static func == (lhs: Address, rhs: Address) -> Bool {
        if lhs.guid != rhs.guid {
            return false
        }
        if lhs.givenName != rhs.givenName {
            return false
        }
        if lhs.additionalName != rhs.additionalName {
            return false
        }
        if lhs.familyName != rhs.familyName {
            return false
        }
        if lhs.organization != rhs.organization {
            return false
        }
        if lhs.streetAddress != rhs.streetAddress {
            return false
        }
        if lhs.addressLevel3 != rhs.addressLevel3 {
            return false
        }
        if lhs.addressLevel2 != rhs.addressLevel2 {
            return false
        }
        if lhs.addressLevel1 != rhs.addressLevel1 {
            return false
        }
        if lhs.postalCode != rhs.postalCode {
            return false
        }
        if lhs.country != rhs.country {
            return false
        }
        if lhs.tel != rhs.tel {
            return false
        }
        if lhs.email != rhs.email {
            return false
        }
        if lhs.timeCreated != rhs.timeCreated {
            return false
        }
        if lhs.timeLastUsed != rhs.timeLastUsed {
            return false
        }
        if lhs.timeLastModified != rhs.timeLastModified {
            return false
        }
        if lhs.timesUsed != rhs.timesUsed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(guid)
        hasher.combine(givenName)
        hasher.combine(additionalName)
        hasher.combine(familyName)
        hasher.combine(organization)
        hasher.combine(streetAddress)
        hasher.combine(addressLevel3)
        hasher.combine(addressLevel2)
        hasher.combine(addressLevel1)
        hasher.combine(postalCode)
        hasher.combine(country)
        hasher.combine(tel)
        hasher.combine(email)
        hasher.combine(timeCreated)
        hasher.combine(timeLastUsed)
        hasher.combine(timeLastModified)
        hasher.combine(timesUsed)
    }
}

private extension Address {
    static func read(from buf: Reader) throws -> Address {
        return try Address(
            guid: String.read(from: buf),
            givenName: String.read(from: buf),
            additionalName: String.read(from: buf),
            familyName: String.read(from: buf),
            organization: String.read(from: buf),
            streetAddress: String.read(from: buf),
            addressLevel3: String.read(from: buf),
            addressLevel2: String.read(from: buf),
            addressLevel1: String.read(from: buf),
            postalCode: String.read(from: buf),
            country: String.read(from: buf),
            tel: String.read(from: buf),
            email: String.read(from: buf),
            timeCreated: Int64.read(from: buf),
            timeLastUsed: Int64?.read(from: buf),
            timeLastModified: Int64.read(from: buf),
            timesUsed: Int64.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        guid.write(into: buf)
        givenName.write(into: buf)
        additionalName.write(into: buf)
        familyName.write(into: buf)
        organization.write(into: buf)
        streetAddress.write(into: buf)
        addressLevel3.write(into: buf)
        addressLevel2.write(into: buf)
        addressLevel1.write(into: buf)
        postalCode.write(into: buf)
        country.write(into: buf)
        tel.write(into: buf)
        email.write(into: buf)
        timeCreated.write(into: buf)
        timeLastUsed.write(into: buf)
        timeLastModified.write(into: buf)
        timesUsed.write(into: buf)
    }
}

extension Address: ViaFfiUsingByteBuffer, ViaFfi {}

public func createKey() throws -> String {
    let _retval = try

        rustCallWithError(AutofillError.self) {
            autofill_4174_create_key($0)
        }
    return try String.lift(_retval)
}

public func encryptString(key: String, cleartext: String) throws -> String {
    let _retval = try

        rustCallWithError(AutofillError.self) {
            autofill_4174_encrypt_string(key.lower(), cleartext.lower(), $0)
        }
    return try String.lift(_retval)
}

public func decryptString(key: String, ciphertext: String) throws -> String {
    let _retval = try

        rustCallWithError(AutofillError.self) {
            autofill_4174_decrypt_string(key.lower(), ciphertext.lower(), $0)
        }
    return try String.lift(_retval)
}

public protocol StoreProtocol {
    func addCreditCard(cc: UpdatableCreditCardFields) throws -> CreditCard
    func getCreditCard(guid: String) throws -> CreditCard
    func getAllCreditCards() throws -> [CreditCard]
    func updateCreditCard(guid: String, cc: UpdatableCreditCardFields) throws
    func deleteCreditCard(guid: String) throws -> Bool
    func touchCreditCard(guid: String) throws
    func addAddress(a: UpdatableAddressFields) throws -> Address
    func getAddress(guid: String) throws -> Address
    func getAllAddresses() throws -> [Address]
    func updateAddress(guid: String, a: UpdatableAddressFields) throws
    func deleteAddress(guid: String) throws -> Bool
    func touchAddress(guid: String) throws
    func scrubEncryptedData() throws
    func registerWithSyncManager()
}

public class Store: StoreProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(dbpath: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_new(dbpath.lower(), $0)
            })
    }

    deinit {
        try! rustCall { ffi_autofill_4174_Store_object_free(pointer, $0) }
    }

    public func addCreditCard(cc: UpdatableCreditCardFields) throws -> CreditCard {
        let _retval = try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_add_credit_card(self.pointer, cc.lower(), $0)
            }
        return try CreditCard.lift(_retval)
    }

    public func getCreditCard(guid: String) throws -> CreditCard {
        let _retval = try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_get_credit_card(self.pointer, guid.lower(), $0)
            }
        return try CreditCard.lift(_retval)
    }

    public func getAllCreditCards() throws -> [CreditCard] {
        let _retval = try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_get_all_credit_cards(self.pointer, $0)
            }
        return try [CreditCard].lift(_retval)
    }

    public func updateCreditCard(guid: String, cc: UpdatableCreditCardFields) throws {
        try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_update_credit_card(self.pointer, guid.lower(), cc.lower(), $0)
            }
    }

    public func deleteCreditCard(guid: String) throws -> Bool {
        let _retval = try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_delete_credit_card(self.pointer, guid.lower(), $0)
            }
        return try Bool.lift(_retval)
    }

    public func touchCreditCard(guid: String) throws {
        try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_touch_credit_card(self.pointer, guid.lower(), $0)
            }
    }

    public func addAddress(a: UpdatableAddressFields) throws -> Address {
        let _retval = try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_add_address(self.pointer, a.lower(), $0)
            }
        return try Address.lift(_retval)
    }

    public func getAddress(guid: String) throws -> Address {
        let _retval = try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_get_address(self.pointer, guid.lower(), $0)
            }
        return try Address.lift(_retval)
    }

    public func getAllAddresses() throws -> [Address] {
        let _retval = try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_get_all_addresses(self.pointer, $0)
            }
        return try [Address].lift(_retval)
    }

    public func updateAddress(guid: String, a: UpdatableAddressFields) throws {
        try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_update_address(self.pointer, guid.lower(), a.lower(), $0)
            }
    }

    public func deleteAddress(guid: String) throws -> Bool {
        let _retval = try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_delete_address(self.pointer, guid.lower(), $0)
            }
        return try Bool.lift(_retval)
    }

    public func touchAddress(guid: String) throws {
        try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_touch_address(self.pointer, guid.lower(), $0)
            }
    }

    public func scrubEncryptedData() throws {
        try
            rustCallWithError(AutofillError.self) {
                autofill_4174_Store_scrub_encrypted_data(self.pointer, $0)
            }
    }

    public func registerWithSyncManager() {
        try!
            rustCall {
                autofill_4174_Store_register_with_sync_manager(self.pointer, $0)
            }
    }
}

private extension Store {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension Store: ViaFfi, Serializable {}
