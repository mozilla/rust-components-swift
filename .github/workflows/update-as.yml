name: Create a PR for release with the newest A-S version available

# Controls when the workflow will run
on:
  schedule:
  # Runs every minute of the 3pm UTC hour of each day
  - cron: '0 15 * * *'
  workflow_dispatch:

jobs:
  release-pr:
    runs-on: macos-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.7]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # Checks out the rust-components-swift repository
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: 'recursive'
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./automation/requirements.txt
      # Gets the new application services tag, and stores it in
      # the environment variable `AS_VERSION` to be used later
      - name: Get new A-S tag
        run: |
          echo "AS_VERSION=`python automation/read_as_tag.py`" >> $GITHUB_ENV
      # Check if a branch was already created on github
      # and set an environment variable `ALREADY_CREATED` to
      # prevent us from creating multiple PRs/branches
      - name: Check if job already ran with this release
        run: |
          echo "ALREADY_CREATED=$(python automation/is_already_updated.py)" >> $GITHUB_ENV
      - name: Setup git information
        if: env.ALREADY_CREATED == 'false'
        run: |
          git config user.email "sync-team@mozilla.com"
          git config user.name "Firefox Sync Engineering"
          git checkout -b update-as-to-${{ env.AS_VERSION }}
      - name: Update Package.swift with new xcframework URL and checksum
        if: env.ALREADY_CREATED == 'false'
        run: |
          python automation/update_package_swift.py
          git commit -am "Updates Package.swift with $AS_VERSION release"
          
      - name: Install Rust for the make_tag script
        if: env.ALREADY_CREATED == 'false'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
      - name: Install make_tag dependencies
        if: env.ALREADY_CREATED == 'false'
        run: |
          brew install swiftformat
          brew install protobuf
          brew install swift-protobuf
      # We strip away the `v` in the AS Version and run the make_tag
      # script, which will generate all the code that needs to be generated
      # Note that the tag argument isn't useful here, since we will
      # have to cut a release with a new tag (possibly with the same name)
      # after the PR is merged
      - name: Runs make_tag script
        if: env.ALREADY_CREATED == 'false'
        run: |
          ./make_tag.sh --as-version ${{ env.AS_VERSION }} ${AS_VERSION:1}
      - name: Create Pull Request
        if: env.ALREADY_CREATED == 'false'
        run: |
          git push origin update-as-to-${{ env.AS_VERSION }} -f
          gh pr create --title "Auto update with latest AS Release ${{ env.AS_VERSION}}" --body "Updates the swift package with the latest Application Services Release" --base "main"

