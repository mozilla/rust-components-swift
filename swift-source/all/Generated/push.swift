// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(MozillaRustComponents)
    import MozillaRustComponents
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_push_7ec0_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_push_7ec0_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
(_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
{
    try makeRustCall(callback, errorHandler: { try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterInt8: FfiConverterPrimitive {
    typealias FfiType = Int8
    typealias SwiftType = Int8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol PushManagerProtocol {
    func subscribe(channelId: String, scope: String, appServerSey: String?) throws -> SubscriptionResponse
    func unsubscribe(channelId: String) throws -> Bool
    func unsubscribeAll() throws
    func update(registrationToken: String) throws -> Bool
    func verifyConnection() throws -> [PushSubscriptionChanged]
    func decrypt(channelId: String, body: String, encoding: String, salt: String, dh: String) throws -> [Int8]
    func dispatchInfoForChid(channelId: String) throws -> DispatchInfo?
}

public class PushManager: PushManagerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(senderId: String, serverHost: String = "updates.push.services.mozilla.com", httpProtocol: String = "https", bridgeType: BridgeType, registrationId: String = "", databasePath: String = "push.sqlite") throws {
        try self.init(unsafeFromRawPointer:

            rustCallWithError(FfiConverterTypePushError.self) {
                push_7ec0_PushManager_new(
                    FfiConverterString.lower(senderId),
                    FfiConverterString.lower(serverHost),
                    FfiConverterString.lower(httpProtocol),
                    FfiConverterTypeBridgeType.lower(bridgeType),
                    FfiConverterString.lower(registrationId),
                    FfiConverterString.lower(databasePath), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_push_7ec0_PushManager_object_free(pointer, $0) }
    }

    public func subscribe(channelId: String = "", scope: String = "", appServerSey: String? = nil) throws -> SubscriptionResponse {
        return try FfiConverterTypeSubscriptionResponse.lift(
            rustCallWithError(FfiConverterTypePushError.self) {
                push_7ec0_PushManager_subscribe(self.pointer,
                                                FfiConverterString.lower(channelId),
                                                FfiConverterString.lower(scope),
                                                FfiConverterOptionString.lower(appServerSey), $0)
            }
        )
    }

    public func unsubscribe(channelId: String) throws -> Bool {
        return try FfiConverterBool.lift(
            rustCallWithError(FfiConverterTypePushError.self) {
                push_7ec0_PushManager_unsubscribe(self.pointer,
                                                  FfiConverterString.lower(channelId), $0)
            }
        )
    }

    public func unsubscribeAll() throws {
        try
            rustCallWithError(FfiConverterTypePushError.self) {
                push_7ec0_PushManager_unsubscribe_all(self.pointer, $0)
            }
    }

    public func update(registrationToken: String) throws -> Bool {
        return try FfiConverterBool.lift(
            rustCallWithError(FfiConverterTypePushError.self) {
                push_7ec0_PushManager_update(self.pointer,
                                             FfiConverterString.lower(registrationToken), $0)
            }
        )
    }

    public func verifyConnection() throws -> [PushSubscriptionChanged] {
        return try FfiConverterSequenceTypePushSubscriptionChanged.lift(
            rustCallWithError(FfiConverterTypePushError.self) {
                push_7ec0_PushManager_verify_connection(self.pointer, $0)
            }
        )
    }

    public func decrypt(channelId: String, body: String, encoding: String = "aes128gcm", salt: String = "", dh: String = "") throws -> [Int8] {
        return try FfiConverterSequenceInt8.lift(
            rustCallWithError(FfiConverterTypePushError.self) {
                push_7ec0_PushManager_decrypt(self.pointer,
                                              FfiConverterString.lower(channelId),
                                              FfiConverterString.lower(body),
                                              FfiConverterString.lower(encoding),
                                              FfiConverterString.lower(salt),
                                              FfiConverterString.lower(dh), $0)
            }
        )
    }

    public func dispatchInfoForChid(channelId: String) throws -> DispatchInfo? {
        return try FfiConverterOptionTypeDispatchInfo.lift(
            rustCallWithError(FfiConverterTypePushError.self) {
                push_7ec0_PushManager_dispatch_info_for_chid(self.pointer,
                                                             FfiConverterString.lower(channelId), $0)
            }
        )
    }
}

public struct FfiConverterTypePushManager: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PushManager

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PushManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PushManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PushManager {
        return PushManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PushManager) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public struct DispatchInfo {
    public var scope: String
    public var endpoint: String
    public var appServerKey: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(scope: String, endpoint: String, appServerKey: String?) {
        self.scope = scope
        self.endpoint = endpoint
        self.appServerKey = appServerKey
    }
}

extension DispatchInfo: Equatable, Hashable {
    public static func == (lhs: DispatchInfo, rhs: DispatchInfo) -> Bool {
        if lhs.scope != rhs.scope {
            return false
        }
        if lhs.endpoint != rhs.endpoint {
            return false
        }
        if lhs.appServerKey != rhs.appServerKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(scope)
        hasher.combine(endpoint)
        hasher.combine(appServerKey)
    }
}

public struct FfiConverterTypeDispatchInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DispatchInfo {
        return try DispatchInfo(
            scope: FfiConverterString.read(from: &buf),
            endpoint: FfiConverterString.read(from: &buf),
            appServerKey: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: DispatchInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.scope, into: &buf)
        FfiConverterString.write(value.endpoint, into: &buf)
        FfiConverterOptionString.write(value.appServerKey, into: &buf)
    }
}

public func FfiConverterTypeDispatchInfo_lift(_ buf: RustBuffer) throws -> DispatchInfo {
    return try FfiConverterTypeDispatchInfo.lift(buf)
}

public func FfiConverterTypeDispatchInfo_lower(_ value: DispatchInfo) -> RustBuffer {
    return FfiConverterTypeDispatchInfo.lower(value)
}

public struct KeyInfo {
    public var auth: String
    public var p256dh: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(auth: String, p256dh: String) {
        self.auth = auth
        self.p256dh = p256dh
    }
}

extension KeyInfo: Equatable, Hashable {
    public static func == (lhs: KeyInfo, rhs: KeyInfo) -> Bool {
        if lhs.auth != rhs.auth {
            return false
        }
        if lhs.p256dh != rhs.p256dh {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(auth)
        hasher.combine(p256dh)
    }
}

public struct FfiConverterTypeKeyInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyInfo {
        return try KeyInfo(
            auth: FfiConverterString.read(from: &buf),
            p256dh: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: KeyInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.auth, into: &buf)
        FfiConverterString.write(value.p256dh, into: &buf)
    }
}

public func FfiConverterTypeKeyInfo_lift(_ buf: RustBuffer) throws -> KeyInfo {
    return try FfiConverterTypeKeyInfo.lift(buf)
}

public func FfiConverterTypeKeyInfo_lower(_ value: KeyInfo) -> RustBuffer {
    return FfiConverterTypeKeyInfo.lower(value)
}

public struct PushSubscriptionChanged {
    public var channelId: String
    public var scope: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(channelId: String, scope: String) {
        self.channelId = channelId
        self.scope = scope
    }
}

extension PushSubscriptionChanged: Equatable, Hashable {
    public static func == (lhs: PushSubscriptionChanged, rhs: PushSubscriptionChanged) -> Bool {
        if lhs.channelId != rhs.channelId {
            return false
        }
        if lhs.scope != rhs.scope {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(channelId)
        hasher.combine(scope)
    }
}

public struct FfiConverterTypePushSubscriptionChanged: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PushSubscriptionChanged {
        return try PushSubscriptionChanged(
            channelId: FfiConverterString.read(from: &buf),
            scope: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PushSubscriptionChanged, into buf: inout [UInt8]) {
        FfiConverterString.write(value.channelId, into: &buf)
        FfiConverterString.write(value.scope, into: &buf)
    }
}

public func FfiConverterTypePushSubscriptionChanged_lift(_ buf: RustBuffer) throws -> PushSubscriptionChanged {
    return try FfiConverterTypePushSubscriptionChanged.lift(buf)
}

public func FfiConverterTypePushSubscriptionChanged_lower(_ value: PushSubscriptionChanged) -> RustBuffer {
    return FfiConverterTypePushSubscriptionChanged.lower(value)
}

public struct SubscriptionInfo {
    public var endpoint: String
    public var keys: KeyInfo

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(endpoint: String, keys: KeyInfo) {
        self.endpoint = endpoint
        self.keys = keys
    }
}

extension SubscriptionInfo: Equatable, Hashable {
    public static func == (lhs: SubscriptionInfo, rhs: SubscriptionInfo) -> Bool {
        if lhs.endpoint != rhs.endpoint {
            return false
        }
        if lhs.keys != rhs.keys {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(endpoint)
        hasher.combine(keys)
    }
}

public struct FfiConverterTypeSubscriptionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SubscriptionInfo {
        return try SubscriptionInfo(
            endpoint: FfiConverterString.read(from: &buf),
            keys: FfiConverterTypeKeyInfo.read(from: &buf)
        )
    }

    public static func write(_ value: SubscriptionInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.endpoint, into: &buf)
        FfiConverterTypeKeyInfo.write(value.keys, into: &buf)
    }
}

public func FfiConverterTypeSubscriptionInfo_lift(_ buf: RustBuffer) throws -> SubscriptionInfo {
    return try FfiConverterTypeSubscriptionInfo.lift(buf)
}

public func FfiConverterTypeSubscriptionInfo_lower(_ value: SubscriptionInfo) -> RustBuffer {
    return FfiConverterTypeSubscriptionInfo.lower(value)
}

public struct SubscriptionResponse {
    public var channelId: String
    public var subscriptionInfo: SubscriptionInfo

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(channelId: String, subscriptionInfo: SubscriptionInfo) {
        self.channelId = channelId
        self.subscriptionInfo = subscriptionInfo
    }
}

extension SubscriptionResponse: Equatable, Hashable {
    public static func == (lhs: SubscriptionResponse, rhs: SubscriptionResponse) -> Bool {
        if lhs.channelId != rhs.channelId {
            return false
        }
        if lhs.subscriptionInfo != rhs.subscriptionInfo {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(channelId)
        hasher.combine(subscriptionInfo)
    }
}

public struct FfiConverterTypeSubscriptionResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SubscriptionResponse {
        return try SubscriptionResponse(
            channelId: FfiConverterString.read(from: &buf),
            subscriptionInfo: FfiConverterTypeSubscriptionInfo.read(from: &buf)
        )
    }

    public static func write(_ value: SubscriptionResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.channelId, into: &buf)
        FfiConverterTypeSubscriptionInfo.write(value.subscriptionInfo, into: &buf)
    }
}

public func FfiConverterTypeSubscriptionResponse_lift(_ buf: RustBuffer) throws -> SubscriptionResponse {
    return try FfiConverterTypeSubscriptionResponse.lift(buf)
}

public func FfiConverterTypeSubscriptionResponse_lower(_ value: SubscriptionResponse) -> RustBuffer {
    return FfiConverterTypeSubscriptionResponse.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum BridgeType {
    case fcm
    case adm
    case apns
    case test
}

public struct FfiConverterTypeBridgeType: FfiConverterRustBuffer {
    typealias SwiftType = BridgeType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BridgeType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .fcm

        case 2: return .adm

        case 3: return .apns

        case 4: return .test

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BridgeType, into buf: inout [UInt8]) {
        switch value {
        case .fcm:
            writeInt(&buf, Int32(1))

        case .adm:
            writeInt(&buf, Int32(2))

        case .apns:
            writeInt(&buf, Int32(3))

        case .test:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeBridgeType_lift(_ buf: RustBuffer) throws -> BridgeType {
    return try FfiConverterTypeBridgeType.lift(buf)
}

public func FfiConverterTypeBridgeType_lower(_ value: BridgeType) -> RustBuffer {
    return FfiConverterTypeBridgeType.lower(value)
}

extension BridgeType: Equatable, Hashable {}

public enum PushError {
    // Simple error enums only carry a message
    case GeneralError(message: String)

    // Simple error enums only carry a message
    case CryptoError(message: String)

    // Simple error enums only carry a message
    case CommunicationError(message: String)

    // Simple error enums only carry a message
    case CommunicationServerError(message: String)

    // Simple error enums only carry a message
    case AlreadyRegisteredError(message: String)

    // Simple error enums only carry a message
    case StorageError(message: String)

    // Simple error enums only carry a message
    case RecordNotFoundError(message: String)

    // Simple error enums only carry a message
    case StorageSqlError(message: String)

    // Simple error enums only carry a message
    case MissingRegistrationTokenError(message: String)

    // Simple error enums only carry a message
    case TranscodingError(message: String)

    // Simple error enums only carry a message
    case UrlParseError(message: String)

    // Simple error enums only carry a message
    case JsonDeserializeError(message: String)

    // Simple error enums only carry a message
    case UaidNotRecognizedError(message: String)

    // Simple error enums only carry a message
    case RequestError(message: String)

    // Simple error enums only carry a message
    case OpenDatabaseError(message: String)
}

public struct FfiConverterTypePushError: FfiConverterRustBuffer {
    typealias SwiftType = PushError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PushError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .GeneralError(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .CryptoError(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .CommunicationError(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .CommunicationServerError(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .AlreadyRegisteredError(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .StorageError(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .RecordNotFoundError(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .StorageSqlError(
                message: FfiConverterString.read(from: &buf)
            )

        case 9: return try .MissingRegistrationTokenError(
                message: FfiConverterString.read(from: &buf)
            )

        case 10: return try .TranscodingError(
                message: FfiConverterString.read(from: &buf)
            )

        case 11: return try .UrlParseError(
                message: FfiConverterString.read(from: &buf)
            )

        case 12: return try .JsonDeserializeError(
                message: FfiConverterString.read(from: &buf)
            )

        case 13: return try .UaidNotRecognizedError(
                message: FfiConverterString.read(from: &buf)
            )

        case 14: return try .RequestError(
                message: FfiConverterString.read(from: &buf)
            )

        case 15: return try .OpenDatabaseError(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PushError, into buf: inout [UInt8]) {
        switch value {
        case let .GeneralError(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
        case let .CryptoError(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
        case let .CommunicationError(message):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(message, into: &buf)
        case let .CommunicationServerError(message):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(message, into: &buf)
        case let .AlreadyRegisteredError(message):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(message, into: &buf)
        case let .StorageError(message):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(message, into: &buf)
        case let .RecordNotFoundError(message):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(message, into: &buf)
        case let .StorageSqlError(message):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(message, into: &buf)
        case let .MissingRegistrationTokenError(message):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(message, into: &buf)
        case let .TranscodingError(message):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(message, into: &buf)
        case let .UrlParseError(message):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(message, into: &buf)
        case let .JsonDeserializeError(message):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(message, into: &buf)
        case let .UaidNotRecognizedError(message):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(message, into: &buf)
        case let .RequestError(message):
            writeInt(&buf, Int32(14))
            FfiConverterString.write(message, into: &buf)
        case let .OpenDatabaseError(message):
            writeInt(&buf, Int32(15))
            FfiConverterString.write(message, into: &buf)
        }
    }
}

extension PushError: Equatable, Hashable {}

extension PushError: Error {}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeDispatchInfo: FfiConverterRustBuffer {
    typealias SwiftType = DispatchInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDispatchInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDispatchInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceInt8: FfiConverterRustBuffer {
    typealias SwiftType = [Int8]

    public static func write(_ value: [Int8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Int8] {
        let len: Int32 = try readInt(&buf)
        var seq = [Int8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterInt8.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypePushSubscriptionChanged: FfiConverterRustBuffer {
    typealias SwiftType = [PushSubscriptionChanged]

    public static func write(_ value: [PushSubscriptionChanged], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePushSubscriptionChanged.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PushSubscriptionChanged] {
        let len: Int32 = try readInt(&buf)
        var seq = [PushSubscriptionChanged]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypePushSubscriptionChanged.read(from: &buf))
        }
        return seq
    }
}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum PushLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {}
}
