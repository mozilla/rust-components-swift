// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(MozillaRustComponents)
    import MozillaRustComponents
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_logins_2894_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_logins_2894_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
        let writer = Writer()
        write(value, into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
(_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
{
    try makeRustCall(callback, errorHandler: { try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

public func createKey() throws -> String {
    return try FfiConverterString.lift(
        try

            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_create_key($0)
            }
    )
}

public func decryptLogin(login: EncryptedLogin, encryptionKey: String) throws -> Login {
    return try FfiConverterTypeLogin.lift(
        try

            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_decrypt_login(
                    FfiConverterTypeEncryptedLogin.lower(login),
                    FfiConverterString.lower(encryptionKey), $0
                )
            }
    )
}

public func encryptLogin(login: Login, encryptionKey: String) throws -> EncryptedLogin {
    return try FfiConverterTypeEncryptedLogin.lift(
        try

            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_encrypt_login(
                    FfiConverterTypeLogin.lower(login),
                    FfiConverterString.lower(encryptionKey), $0
                )
            }
    )
}

public func decryptFields(secFields: String, encryptionKey: String) throws -> SecureLoginFields {
    return try FfiConverterTypeSecureLoginFields.lift(
        try

            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_decrypt_fields(
                    FfiConverterString.lower(secFields),
                    FfiConverterString.lower(encryptionKey), $0
                )
            }
    )
}

public func encryptFields(secFields: SecureLoginFields, encryptionKey: String) throws -> String {
    return try FfiConverterString.lift(
        try

            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_encrypt_fields(
                    FfiConverterTypeSecureLoginFields.lower(secFields),
                    FfiConverterString.lower(encryptionKey), $0
                )
            }
    )
}

public func createCanary(text: String, encryptionKey: String) throws -> String {
    return try FfiConverterString.lift(
        try

            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_create_canary(
                    FfiConverterString.lower(text),
                    FfiConverterString.lower(encryptionKey), $0
                )
            }
    )
}

public func checkCanary(canary: String, text: String, encryptionKey: String) throws -> Bool {
    return try FfiConverterBool.lift(
        try

            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_check_canary(
                    FfiConverterString.lower(canary),
                    FfiConverterString.lower(text),
                    FfiConverterString.lower(encryptionKey), $0
                )
            }
    )
}

public func migrateLogins(path: String, newEncryptionKey: String, sqlcipherPath: String, sqlcipherKey: String, salt: String?) throws -> String {
    return try FfiConverterString.lift(
        try

            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_migrate_logins(
                    FfiConverterString.lower(path),
                    FfiConverterString.lower(newEncryptionKey),
                    FfiConverterString.lower(sqlcipherPath),
                    FfiConverterString.lower(sqlcipherKey),
                    FfiConverterOptionString.lower(salt), $0
                )
            }
    )
}

public protocol LoginStoreProtocol {
    func add(login: LoginEntry, encryptionKey: String) throws -> EncryptedLogin
    func update(id: String, login: LoginEntry, encryptionKey: String) throws -> EncryptedLogin
    func addOrUpdate(login: LoginEntry, encryptionKey: String) throws -> EncryptedLogin
    func delete(id: String) throws -> Bool
    func wipe() throws
    func wipeLocal() throws
    func reset() throws
    func touch(id: String) throws
    func list() throws -> [EncryptedLogin]
    func getByBaseDomain(baseDomain: String) throws -> [EncryptedLogin]
    func findLoginToUpdate(look: LoginEntry, encryptionKey: String) throws -> Login?
    func get(id: String) throws -> EncryptedLogin?
    func importMultiple(login: [Login], encryptionKey: String) throws -> String
    func registerWithSyncManager()
    func sync(keyId: String, accessToken: String, syncKey: String, tokenserverUrl: String, localEncryptionKey: String) throws -> String
}

public class LoginStore: LoginStoreProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(path: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_LoginStore_new(
                    FfiConverterString.lower(path), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_logins_2894_LoginStore_object_free(pointer, $0) }
    }

    public func add(login: LoginEntry, encryptionKey: String) throws -> EncryptedLogin {
        return try FfiConverterTypeEncryptedLogin.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_add(self.pointer,
                                               FfiConverterTypeLoginEntry.lower(login),
                                               FfiConverterString.lower(encryptionKey), $0)
                }
        )
    }

    public func update(id: String, login: LoginEntry, encryptionKey: String) throws -> EncryptedLogin {
        return try FfiConverterTypeEncryptedLogin.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_update(self.pointer,
                                                  FfiConverterString.lower(id),
                                                  FfiConverterTypeLoginEntry.lower(login),
                                                  FfiConverterString.lower(encryptionKey), $0)
                }
        )
    }

    public func addOrUpdate(login: LoginEntry, encryptionKey: String) throws -> EncryptedLogin {
        return try FfiConverterTypeEncryptedLogin.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_add_or_update(self.pointer,
                                                         FfiConverterTypeLoginEntry.lower(login),
                                                         FfiConverterString.lower(encryptionKey), $0)
                }
        )
    }

    public func delete(id: String) throws -> Bool {
        return try FfiConverterBool.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_delete(self.pointer,
                                                  FfiConverterString.lower(id), $0)
                }
        )
    }

    public func wipe() throws {
        try
            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_LoginStore_wipe(self.pointer, $0)
            }
    }

    public func wipeLocal() throws {
        try
            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_LoginStore_wipe_local(self.pointer, $0)
            }
    }

    public func reset() throws {
        try
            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_LoginStore_reset(self.pointer, $0)
            }
    }

    public func touch(id: String) throws {
        try
            rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                logins_2894_LoginStore_touch(self.pointer,
                                             FfiConverterString.lower(id), $0)
            }
    }

    public func list() throws -> [EncryptedLogin] {
        return try FfiConverterSequenceTypeEncryptedLogin.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_list(self.pointer, $0)
                }
        )
    }

    public func getByBaseDomain(baseDomain: String) throws -> [EncryptedLogin] {
        return try FfiConverterSequenceTypeEncryptedLogin.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_get_by_base_domain(self.pointer,
                                                              FfiConverterString.lower(baseDomain), $0)
                }
        )
    }

    public func findLoginToUpdate(look: LoginEntry, encryptionKey: String) throws -> Login? {
        return try FfiConverterOptionTypeLogin.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_find_login_to_update(self.pointer,
                                                                FfiConverterTypeLoginEntry.lower(look),
                                                                FfiConverterString.lower(encryptionKey), $0)
                }
        )
    }

    public func get(id: String) throws -> EncryptedLogin? {
        return try FfiConverterOptionTypeEncryptedLogin.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_get(self.pointer,
                                               FfiConverterString.lower(id), $0)
                }
        )
    }

    public func importMultiple(login: [Login], encryptionKey: String) throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_import_multiple(self.pointer,
                                                           FfiConverterSequenceTypeLogin.lower(login),
                                                           FfiConverterString.lower(encryptionKey), $0)
                }
        )
    }

    public func registerWithSyncManager() {
        try!
            rustCall {
                logins_2894_LoginStore_register_with_sync_manager(self.pointer, $0)
            }
    }

    public func sync(keyId: String, accessToken: String, syncKey: String, tokenserverUrl: String, localEncryptionKey: String) throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeLoginsStorageError.self) {
                    logins_2894_LoginStore_sync(self.pointer,
                                                FfiConverterString.lower(keyId),
                                                FfiConverterString.lower(accessToken),
                                                FfiConverterString.lower(syncKey),
                                                FfiConverterString.lower(tokenserverUrl),
                                                FfiConverterString.lower(localEncryptionKey), $0)
                }
        )
    }
}

private struct FfiConverterTypeLoginStore: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoginStore

    static func read(from buf: Reader) throws -> LoginStore {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: LoginStore, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoginStore {
        return LoginStore(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: LoginStore) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public struct LoginFields {
    public var origin: String
    public var httpRealm: String?
    public var formActionOrigin: String?
    public var usernameField: String
    public var passwordField: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(origin: String, httpRealm: String?, formActionOrigin: String?, usernameField: String, passwordField: String) {
        self.origin = origin
        self.httpRealm = httpRealm
        self.formActionOrigin = formActionOrigin
        self.usernameField = usernameField
        self.passwordField = passwordField
    }
}

extension LoginFields: Equatable, Hashable {
    public static func == (lhs: LoginFields, rhs: LoginFields) -> Bool {
        if lhs.origin != rhs.origin {
            return false
        }
        if lhs.httpRealm != rhs.httpRealm {
            return false
        }
        if lhs.formActionOrigin != rhs.formActionOrigin {
            return false
        }
        if lhs.usernameField != rhs.usernameField {
            return false
        }
        if lhs.passwordField != rhs.passwordField {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(origin)
        hasher.combine(httpRealm)
        hasher.combine(formActionOrigin)
        hasher.combine(usernameField)
        hasher.combine(passwordField)
    }
}

private struct FfiConverterTypeLoginFields: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> LoginFields {
        return try LoginFields(
            origin: FfiConverterString.read(from: buf),
            httpRealm: FfiConverterOptionString.read(from: buf),
            formActionOrigin: FfiConverterOptionString.read(from: buf),
            usernameField: FfiConverterString.read(from: buf),
            passwordField: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: LoginFields, into buf: Writer) {
        FfiConverterString.write(value.origin, into: buf)
        FfiConverterOptionString.write(value.httpRealm, into: buf)
        FfiConverterOptionString.write(value.formActionOrigin, into: buf)
        FfiConverterString.write(value.usernameField, into: buf)
        FfiConverterString.write(value.passwordField, into: buf)
    }
}

public struct SecureLoginFields {
    public var password: String
    public var username: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(password: String, username: String) {
        self.password = password
        self.username = username
    }
}

extension SecureLoginFields: Equatable, Hashable {
    public static func == (lhs: SecureLoginFields, rhs: SecureLoginFields) -> Bool {
        if lhs.password != rhs.password {
            return false
        }
        if lhs.username != rhs.username {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(password)
        hasher.combine(username)
    }
}

private struct FfiConverterTypeSecureLoginFields: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> SecureLoginFields {
        return try SecureLoginFields(
            password: FfiConverterString.read(from: buf),
            username: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: SecureLoginFields, into buf: Writer) {
        FfiConverterString.write(value.password, into: buf)
        FfiConverterString.write(value.username, into: buf)
    }
}

public struct RecordFields {
    public var id: String
    public var timesUsed: Int64
    public var timeCreated: Int64
    public var timeLastUsed: Int64
    public var timePasswordChanged: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, timesUsed: Int64, timeCreated: Int64, timeLastUsed: Int64, timePasswordChanged: Int64) {
        self.id = id
        self.timesUsed = timesUsed
        self.timeCreated = timeCreated
        self.timeLastUsed = timeLastUsed
        self.timePasswordChanged = timePasswordChanged
    }
}

extension RecordFields: Equatable, Hashable {
    public static func == (lhs: RecordFields, rhs: RecordFields) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.timesUsed != rhs.timesUsed {
            return false
        }
        if lhs.timeCreated != rhs.timeCreated {
            return false
        }
        if lhs.timeLastUsed != rhs.timeLastUsed {
            return false
        }
        if lhs.timePasswordChanged != rhs.timePasswordChanged {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(timesUsed)
        hasher.combine(timeCreated)
        hasher.combine(timeLastUsed)
        hasher.combine(timePasswordChanged)
    }
}

private struct FfiConverterTypeRecordFields: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> RecordFields {
        return try RecordFields(
            id: FfiConverterString.read(from: buf),
            timesUsed: FfiConverterInt64.read(from: buf),
            timeCreated: FfiConverterInt64.read(from: buf),
            timeLastUsed: FfiConverterInt64.read(from: buf),
            timePasswordChanged: FfiConverterInt64.read(from: buf)
        )
    }

    fileprivate static func write(_ value: RecordFields, into buf: Writer) {
        FfiConverterString.write(value.id, into: buf)
        FfiConverterInt64.write(value.timesUsed, into: buf)
        FfiConverterInt64.write(value.timeCreated, into: buf)
        FfiConverterInt64.write(value.timeLastUsed, into: buf)
        FfiConverterInt64.write(value.timePasswordChanged, into: buf)
    }
}

public struct LoginEntry {
    public var fields: LoginFields
    public var secFields: SecureLoginFields

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fields: LoginFields, secFields: SecureLoginFields) {
        self.fields = fields
        self.secFields = secFields
    }
}

extension LoginEntry: Equatable, Hashable {
    public static func == (lhs: LoginEntry, rhs: LoginEntry) -> Bool {
        if lhs.fields != rhs.fields {
            return false
        }
        if lhs.secFields != rhs.secFields {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fields)
        hasher.combine(secFields)
    }
}

private struct FfiConverterTypeLoginEntry: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> LoginEntry {
        return try LoginEntry(
            fields: FfiConverterTypeLoginFields.read(from: buf),
            secFields: FfiConverterTypeSecureLoginFields.read(from: buf)
        )
    }

    fileprivate static func write(_ value: LoginEntry, into buf: Writer) {
        FfiConverterTypeLoginFields.write(value.fields, into: buf)
        FfiConverterTypeSecureLoginFields.write(value.secFields, into: buf)
    }
}

public struct Login {
    public var record: RecordFields
    public var fields: LoginFields
    public var secFields: SecureLoginFields

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(record: RecordFields, fields: LoginFields, secFields: SecureLoginFields) {
        self.record = record
        self.fields = fields
        self.secFields = secFields
    }
}

extension Login: Equatable, Hashable {
    public static func == (lhs: Login, rhs: Login) -> Bool {
        if lhs.record != rhs.record {
            return false
        }
        if lhs.fields != rhs.fields {
            return false
        }
        if lhs.secFields != rhs.secFields {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(record)
        hasher.combine(fields)
        hasher.combine(secFields)
    }
}

private struct FfiConverterTypeLogin: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> Login {
        return try Login(
            record: FfiConverterTypeRecordFields.read(from: buf),
            fields: FfiConverterTypeLoginFields.read(from: buf),
            secFields: FfiConverterTypeSecureLoginFields.read(from: buf)
        )
    }

    fileprivate static func write(_ value: Login, into buf: Writer) {
        FfiConverterTypeRecordFields.write(value.record, into: buf)
        FfiConverterTypeLoginFields.write(value.fields, into: buf)
        FfiConverterTypeSecureLoginFields.write(value.secFields, into: buf)
    }
}

public struct EncryptedLogin {
    public var record: RecordFields
    public var fields: LoginFields
    public var secFields: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(record: RecordFields, fields: LoginFields, secFields: String) {
        self.record = record
        self.fields = fields
        self.secFields = secFields
    }
}

extension EncryptedLogin: Equatable, Hashable {
    public static func == (lhs: EncryptedLogin, rhs: EncryptedLogin) -> Bool {
        if lhs.record != rhs.record {
            return false
        }
        if lhs.fields != rhs.fields {
            return false
        }
        if lhs.secFields != rhs.secFields {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(record)
        hasher.combine(fields)
        hasher.combine(secFields)
    }
}

private struct FfiConverterTypeEncryptedLogin: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> EncryptedLogin {
        return try EncryptedLogin(
            record: FfiConverterTypeRecordFields.read(from: buf),
            fields: FfiConverterTypeLoginFields.read(from: buf),
            secFields: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: EncryptedLogin, into buf: Writer) {
        FfiConverterTypeRecordFields.write(value.record, into: buf)
        FfiConverterTypeLoginFields.write(value.fields, into: buf)
        FfiConverterString.write(value.secFields, into: buf)
    }
}

public enum LoginsStorageError {
    // Simple error enums only carry a message
    case UnexpectedLoginsStorageError(message: String)

    // Simple error enums only carry a message
    case SyncAuthInvalid(message: String)

    // Simple error enums only carry a message
    case MismatchedLock(message: String)

    // Simple error enums only carry a message
    case NoSuchRecord(message: String)

    // Simple error enums only carry a message
    case InvalidRecord(message: String)

    // Simple error enums only carry a message
    case CryptoError(message: String)

    // Simple error enums only carry a message
    case InvalidKey(message: String)

    // Simple error enums only carry a message
    case RequestFailed(message: String)

    // Simple error enums only carry a message
    case Interrupted(message: String)
}

private struct FfiConverterTypeLoginsStorageError: FfiConverterRustBuffer {
    typealias SwiftType = LoginsStorageError

    static func read(from buf: Reader) throws -> LoginsStorageError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .UnexpectedLoginsStorageError(
                message: try FfiConverterString.read(from: buf)
            )

        case 2: return .SyncAuthInvalid(
                message: try FfiConverterString.read(from: buf)
            )

        case 3: return .MismatchedLock(
                message: try FfiConverterString.read(from: buf)
            )

        case 4: return .NoSuchRecord(
                message: try FfiConverterString.read(from: buf)
            )

        case 5: return .InvalidRecord(
                message: try FfiConverterString.read(from: buf)
            )

        case 6: return .CryptoError(
                message: try FfiConverterString.read(from: buf)
            )

        case 7: return .InvalidKey(
                message: try FfiConverterString.read(from: buf)
            )

        case 8: return .RequestFailed(
                message: try FfiConverterString.read(from: buf)
            )

        case 9: return .Interrupted(
                message: try FfiConverterString.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: LoginsStorageError, into buf: Writer) {
        switch value {
        case let .UnexpectedLoginsStorageError(message):
            buf.writeInt(Int32(1))
            FfiConverterString.write(message, into: buf)
        case let .SyncAuthInvalid(message):
            buf.writeInt(Int32(2))
            FfiConverterString.write(message, into: buf)
        case let .MismatchedLock(message):
            buf.writeInt(Int32(3))
            FfiConverterString.write(message, into: buf)
        case let .NoSuchRecord(message):
            buf.writeInt(Int32(4))
            FfiConverterString.write(message, into: buf)
        case let .InvalidRecord(message):
            buf.writeInt(Int32(5))
            FfiConverterString.write(message, into: buf)
        case let .CryptoError(message):
            buf.writeInt(Int32(6))
            FfiConverterString.write(message, into: buf)
        case let .InvalidKey(message):
            buf.writeInt(Int32(7))
            FfiConverterString.write(message, into: buf)
        case let .RequestFailed(message):
            buf.writeInt(Int32(8))
            FfiConverterString.write(message, into: buf)
        case let .Interrupted(message):
            buf.writeInt(Int32(9))
            FfiConverterString.write(message, into: buf)
        }
    }
}

extension LoginsStorageError: Equatable, Hashable {}

extension LoginsStorageError: Error {}
private struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    static func read(from buf: Reader) throws -> Int64 {
        return try lift(buf.readInt())
    }

    static func write(_ value: Int64, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    static func write(_ value: Bool, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}

// Helper code for LoginStore class is found in ObjectTemplate.swift
// Helper code for EncryptedLogin record is found in RecordTemplate.swift
// Helper code for Login record is found in RecordTemplate.swift
// Helper code for LoginEntry record is found in RecordTemplate.swift
// Helper code for LoginFields record is found in RecordTemplate.swift
// Helper code for RecordFields record is found in RecordTemplate.swift
// Helper code for SecureLoginFields record is found in RecordTemplate.swift
// Helper code for LoginsStorageError error is found in ErrorTemplate.swift

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterString.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeEncryptedLogin: FfiConverterRustBuffer {
    typealias SwiftType = EncryptedLogin?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeEncryptedLogin.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeEncryptedLogin.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeLogin: FfiConverterRustBuffer {
    typealias SwiftType = Login?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeLogin.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLogin.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceTypeEncryptedLogin: FfiConverterRustBuffer {
    typealias SwiftType = [EncryptedLogin]

    static func write(_ value: [EncryptedLogin], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeEncryptedLogin.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [EncryptedLogin] {
        let len: Int32 = try buf.readInt()
        var seq = [EncryptedLogin]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeEncryptedLogin.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeLogin: FfiConverterRustBuffer {
    typealias SwiftType = [Login]

    static func write(_ value: [Login], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeLogin.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [Login] {
        let len: Int32 = try buf.readInt()
        var seq = [Login]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLogin.read(from: buf))
        }
        return seq
    }
}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum LoginsLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
        // No initialization code needed
    }
}
